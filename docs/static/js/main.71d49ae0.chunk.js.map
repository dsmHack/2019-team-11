{"version":3,"sources":["ui-core/components/map.js","ui-core/components/header.js","ui-core/modals/address.js","ui-core/constants/address.js","constants_shared/layers.js","ui-core/components/radio-activity-type.js","server-core/border-data-api.js","server-core/constants/urls.js","server-core/location-service.js","server-core/models/data.js","server-core/models/point.js","server-core/api-client.js","App.js","ui-core/constants/header.js","serviceWorker.js","index.js"],"names":["PlottedMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","markers","shouldCreateMarkers","undefined","dataPointsToPlot","console","log","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","dataPoint","value","push","createMarker","err","return","length","point","actualPoint","url","locId","react_default","a","createElement","dist","key","position","lat","lng","long","icon","anchor","window","google","maps","Point","scaledSize","Size","createMarkers","zoom","initialCenter","paths","coordinatesList","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","renderMarkers","Component","Header","title","className","AppBar_default","AddressModal","state","address","handleChange","bind","assertThisInitialized","handleKeyPress","target","_ref","setState","event","handleSubmit","_this2","Card_default","CardHeader_default","CardContent_default","TextField_default","type","placeholder","onChange","onKeyPress","CardActions_default","Button_default","size","variant","color","onClick","DRINKING_LAYER","ActivityTypeRadio","classes","root","FormControl_default","component","formControl","FormLabel_default","RadioGroup_default","aria-label","name","group","FormControlLabel_default","control","Radio_default","label","React","withStyles","theme","display","margin","spacing","unit","concat","top","left","_callee","hucid","hucType","regenerator_default","wrap","_context","prev","abrupt","axios","get","then","response","catch","error","stop","getHucBorder","FIBI_URL","FIBI_BY_SITE_URL","EPA_URL","SAMPLE_RESULTS_URL","ERROR_SHE_GET_WET","ERROR_ADDRESS_NOT_FOUND","ERROR_WATERSHED_NOT_FOUND","HUC_FROM_ADDRESS_URL","WATERSHED_DATA_URL","params","outFields","outSR","latestWkid","wkid","f","SingleLine","data","candidates","Promise","reject","firstCandidate","spatialReference","x","location","y","getWatershedData","_callee2","_context2","spatialRel","where","geometryType","inSR","geometry","features","attributes","HUC12","getHucFromAddress","Data","date","datas","huc","baseEpaQuery","_callee3","charName","sampleResult","dataSamples","locationResult","pointSamples","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_context3","getSampleResults","sent","getValueDataFromXml","getEpaStations","getLocationDataFromXml","keys","t0","finish","xml","activities","DOMParser","parseFromString","getElementsByTagName","samples","Map","_loop","activity","sample","getTagValue","qualifiedName","tag","childNodes","nodeValue","existing","Date","parse","set","_callee4","promise","esriGeometry","dataCordsQueryParam","_context4","results","rings","forEach","lngLat","substring","locations","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","_iterator2","_callee5","isHuc12","huc8","_context5","sites","filteredSites","filter","site","huc12","resolve","map","id","siteIds","all","fetchFibiDataBySiteId","_callee6","siteId","_context6","sort","b","sampleDate","result","fibiSite","landmark","LatDD","LongDD","fibiData","FIBI","FIBIType","class","FIBIClass","_callee7","characteristicName","query","_context7","dateTwoMonthsAgo","_callee8","_context8","startDateLo","setMonth","getMonth","toLocaleDateString","replace","_callee9","_context9","api_client","getEcoliData","getNitrateData","getFibiData","getHuc","convertEsriGeometryPolygonToLatLngList","createMuiTheme","palette","primary","blue","secondary","main","typography","useNextVariants","App","asyncToGenerator","mark","hucId","hucBorder","latlngs","coords","latlng","loc","nitratePoints","ecoliPoints","API","Number","showModal","t1","t2","t3","t4","t5","ecoliData","nitrateData","_x","apply","arguments","selectedLayer","ui_core_modals_address","handleClose","show","setCoordinatesList","setAddress","styles","components_header","radio_activity_type","renderModal","GoogleApiWrapper","apiKey","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.71d49ae0.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport { Map, Marker, Polygon } from 'google-maps-react';\n\nclass PlottedMap extends Component {\n    constructor(props) {\n        super();\n        this.markers = []\n        this.shouldCreateMarkers = true;\n    }\n\n    createMarkers() {\n        if(this.props.dataPointsToPlot !== undefined && this.props.dataPointsToPlot !== []){\n            console.log(\"Running create\", this.props.dataPointsToPlot);\n            for(var dataPoint of this.props.dataPointsToPlot){\n                this.markers.push(this.createMarker(dataPoint));\n            };\n            if(this.markers.length > 0){\n\n            }\n        }\n        \n    }\n\n    createMarker(point) {\n        console.log(\"Point\", point);\n        const actualPoint = point[1];\n        let url = \"/images/low.png\";\n        if(actualPoint.locId == \"PCCB_WQX-977082\"){\n            url = \"/images/med.png\";\n        }\n        return <Marker\n            key={actualPoint.locId}\n            position={{ lat: actualPoint.lat, lng: actualPoint.long }}\n            icon={{\n                url: url,\n                anchor: new window.google.maps.Point(24, 24),\n                scaledSize: new window.google.maps.Size(48, 48)\n            }}\n        />\n    }\n\n    renderMarkers() {\n        if(this.shouldCreateMarkers){\n            this.createMarkers();\n        }\n\n        if(this.markers.length > 0 ){\n            console.log(\"render Markers: \", this.markers);\n            return this.markers\n        }\n    }\n\n    render() {\n        return (\n            <Map\n                google={this.props.google}\n                zoom={13}\n                initialCenter={{ lat: 41.583586, lng: -93.628419 }}>\n\n                <Polygon\n                    paths={this.props.coordinatesList}\n                    strokeColor=\"#0000FF\"\n                    strokeOpacity={0.8}\n                    strokeWeight={2}\n                    fillColor=\"#0000FF\"\n                    fillOpacity={0.35} />\n\n                {this.renderMarkers()}\n\n            </Map>\n        )\n    }\n}\n\nexport default PlottedMap;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport \"./header.css\";\n\nconst Header = props => {\n    const { title } = props;\n    return (\n        <div className=\"header\">\n            <AppBar position=\"static\">\n                <label>{title}</label>\n            </AppBar>\n        </div>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {\n    ADDRESS_MODAL_TITLE,\n    ADDRESS_MODAL_INPUT_PLACEHOLDER\n} from \"../constants/address\";\nimport \"./address.css\";\n\nclass AddressModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: \"\"\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n\n    handleChange({ target }) {\n        this.setState({\n            address: target.value\n        });\n    }\n\n    async handleKeyPress(event) {\n\tif(event.key === 'Enter'){\n\t    await this.props.handleSubmit(this.state.address);\n        }\n    }\n    \n    render() {\n        return (\n            <Card className=\"modal\">\n                <CardHeader className=\"title\" title={ADDRESS_MODAL_TITLE} />\n                <CardContent>\n                    <TextField\n                        className=\"address\"\n                        type=\"text\"\n                        value={this.state.address}\n                        placeholder={ADDRESS_MODAL_INPUT_PLACEHOLDER}\n                        onChange={this.handleChange}\n\t    onKeyPress={this.handleKeyPress}\n                />\n                </CardContent>\n                <CardActions>\n                    <Button\n                        className=\"nextButton\"\n                        size=\"medium\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => this.props.handleSubmit(this.state.address)}\n                    >\n                        NEXT\n            </Button>;\n                </CardActions>\n            </Card>\n        );\n    }\n}\n\n\n\nAddressModal.propTypes = {\n    handleClose: PropTypes.func.isRequired,\n    show: PropTypes.bool.isRequired\n};\n\nexport default AddressModal;\n","export const ADDRESS_MODAL_TITLE = 'TYPE YOUR ADDRESS';\nexport const ADDRESS_MODAL_INPUT_PLACEHOLDER = 'Enter Address Here...';","export const FISH_LAYER = \"fish\";\nexport const SWIMMING_LAYER = \"swimming\";\nexport const DRINKING_LAYER = \"drinking\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport CardHeader from \"../modals/address\";\nimport {ADDRESS_MODAL_TITLE} from \"../constants/address\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n    },\n    formControl: {\n        margin: theme.spacing.unit * 3,\n    },\n    group: {\n        margin: `${theme.spacing.unit}px 0`,\n    },\n    position: 'absolute',\n    top: 0,    // computed based on child and parent's height\n    left: 0\n});\n\nclass ActivityTypeRadio extends React.Component {\n    handleChange = event => {\n        this.setState({value: event.target.value});\n    };\n\n    render() {\n        const {classes} = this.props;\n\n        return (\n            //<Card className=\"modal\">\n              //  <CardContent>\n                    <div className={classes.root}>\n                        <FormControl component=\"fieldset\" className={classes.formControl}>\n                            <FormLabel component=\"legend\">Select activity of interest:</FormLabel>\n                            <RadioGroup\n                                aria-label=\"Activity\"\n                                name=\"activity_type\"\n                                className={classes.group}\n                                value={this.props.value}\n                                onChange={this.handleChange}\n                            >\n                                <FormControlLabel value=\"fish\" control={<Radio/>} label=\"Fishing\"/>\n                                <FormControlLabel value=\"swim\" control={<Radio/>} label=\"Swimming\"/>\n                                <FormControlLabel value=\"drink\" control={<Radio/>} label=\"Drinking\"/>\n                            </RadioGroup>\n                        </FormControl>\n                    </div>\n                //</CardContent>\n           // </Card>\n        );\n    }\n}\n\nActivityTypeRadio.propTypes = {\n    handleClose: PropTypes.func.isRequired,\n    show: PropTypes.bool.isRequired\n};\nexport default withStyles(styles)(ActivityTypeRadio);","import axios from 'axios';\n\nasync function getHucBorder(hucid, hucType) {\n\n    let url = \"https://watersgeo.epa.gov/arcgis/rest/services/NHDPlus_NP21/WBD_NP21_Simplified/MapServer/find?searchText=\" +\n        hucid + \"&contains=true&searchFields=&sr=&layers=\" +\n        hucType + \"&layerDefs=&returnGeometry=true&maxAllowableOffset=&geometryPrecision=&dynamicLayers=&returnZ\" +\n        \"=false&returnM=false&gdbVersion=&returnUnformattedValues=false&returnFieldName=false&datumTransformations\" +\n        \"=&layerParameterValues=&mapRangeValues=&layerRangeValues=&f=pjson\";\n\n   return axios.get(url).then((response) => {\n        return response;\n    })\n        .catch((error) => {\n            console.log(error);\n            return \"will the water kill me?\";\n        });\n}\n\nexport default getHucBorder;\n","export const ECOLI_URL = \"https://www.waterqualitydata.us/data/Result/search?\";\nexport const FIBI_URL =\n    \"https://programs.iowadnr.gov/bionet/api/v1/sites/by_huc8/\";\nexport const FIBI_BY_SITE_URL =\n    \"https://programs.iowadnr.gov/bionet/api/v1/fish/fibi/by_site/\";\nexport const EPA_URL = \"https://www.waterqualitydata.us/data/Station/search?\";\nexport const SAMPLE_RESULTS_URL =\n    \"https://www.waterqualitydata.us/data/Result/search?\";\nexport const ERROR_SHE_GET_WET = \"She get wet\";\nexport const ERROR_ADDRESS_NOT_FOUND = \"Address not found\";\nexport const ERROR_WATERSHED_NOT_FOUND = \"Watershed not found\";\nexport const HUC_FROM_ADDRESS_URL =\n    \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates\";\nexport const WATERSHED_DATA_URL =\n    \"https://inlandwaters.geoplatform.gov/arcgis/rest/services/NHDPlus/WatershedBoundaryDataset/MapServer/10/query\";\nexport const HUC_BORDER_URL =\n    \"https://watersgeo.epa.gov/arcgis/rest/services/NHDPlus_NP21/WBD_NP21_Simplified/MapServer/find?searchText=\";\n","import axios from \"axios\";\nimport { HUC_FROM_ADDRESS_URL, WATERSHED_DATA_URL, ERROR_ADDRESS_NOT_FOUND, ERROR_WATERSHED_NOT_FOUND } from \"./constants/urls\";\n\nasync function getHucFromAddress(address) {\n    var url = HUC_FROM_ADDRESS_URL;\n    return axios\n        .get(url, {\n            params: {\n                outFields: \"Loc_name,City,Place_addr,Region,RegionAbbr,Country\",\n                outSR: { latestWkid: 3857, wkid: 102100 },\n                f: \"json\",\n                SingleLine: address\n            }\n        })\n        .then(response => {\n            if (typeof response.data.candidates[0] === \"undefined\") {\n                return Promise.reject(ERROR_ADDRESS_NOT_FOUND);\n            }\n            var firstCandidate = response.data.candidates[0];\n            return {\n                spatialReference: response.data.spatialReference,\n                x: firstCandidate.location.x,\n                y: firstCandidate.location.y\n            };\n        })\n        .then(location => {\n            return getWatershedData(location);\n        });\n}\n\nasync function getWatershedData(location) {\n    var url = WATERSHED_DATA_URL;\n\n    return axios\n        .get(url, {\n            params: {\n                f: \"json\",\n                outFields: \"HUC12\",\n                spatialRel: \"esriSpatialRelIntersects\",\n                where: \"1=1\",\n                geometryType: \"esriGeometryPoint\",\n                inSR: \"102100\",\n                outSR: \"102100\",\n                geometry: location\n            }\n        })\n        .then(response => {\n            if (typeof response.data.features[0] === \"undefined\") {\n                return Promise.reject(ERROR_WATERSHED_NOT_FOUND);\n            }\n            return response.data.features[0].attributes.HUC12;\n        });\n}\n\nexport default getHucFromAddress;\n","export default class Data {\n    constructor(){\n\tthis.name = \"\";\n\tthis.unit = \"\";\n\tthis.value = 0.0;\n\tthis.date = \"\";\n\tthis.locId = \"\";\n    }\n}","export default class Point {\n    constructor(){\n\tthis.locId = \"\";\n\tthis.name = \"\";\n\tthis.lat = 0.0;\n\tthis.long = 0.0;\n\tthis.datas = [];\n    }\n}","import axios from \"axios\";\nimport {\n    FIBI_URL,\n    FIBI_BY_SITE_URL,\n    EPA_URL,\n    SAMPLE_RESULTS_URL,\n    ERROR_SHE_GET_WET\n} from \"./constants/urls\";\nimport Data from \"./models/data\";\nimport Point from \"./models/point\";\n\n// axios.defaults.timeout = 1000000000;\n\nasync function getEcoliData(huc) {\n    return baseEpaQuery(huc, \"Escherichia%20coli\");\n}\n\nasync function getNitrateData(huc) {\n    return baseEpaQuery(huc, \"Nitrate\");\n}\n\nasync function baseEpaQuery(huc, charName) {\n    let sampleResult = await getSampleResults(huc, charName);\n    let dataSamples = getValueDataFromXml(sampleResult.data)\n\n    let locationResult = await getEpaStations(huc, charName);\n    let pointSamples = getLocationDataFromXml(locationResult.data)\n\n    for (let key of pointSamples.keys()) {\n        let data = dataSamples.get(key);\n        if (data !== undefined) {\n            pointSamples.get(key).datas.push(data);\n        }\n    }\n\n    return pointSamples;\n}\n\nfunction getValueDataFromXml(xml) {\n    let parsedResult = new DOMParser().parseFromString(xml, \"text/xml\");\n    let activities = parsedResult.getElementsByTagName(\"Activity\");\n    let samples = new Map();\n    for (let activity of activities) {\n\t    let sample = new Data();\n        const getTagValue = (qualifiedName) => {\n            let tag = activity.getElementsByTagName(qualifiedName)[0];\n            return (tag === undefined) ? null :tag.childNodes[0].nodeValue;\n        };\n\n        sample.name = getTagValue(\"CharacteristicName\");\n\t    sample.locId = getTagValue(\"MonitoringLocationIdentifier\");\n        sample.date = getTagValue(\"ActivityStartDate\");\n        sample.value = getTagValue(\"ResultMeasureValue\");\n\t    sample.unit = getTagValue(\"MeasureUnitCode\");\n\n        let existing = samples[sample.locId];\n        if (existing == null || (Date.parse(sample.date) > Date.parse(existing.date))) {\n            samples.set(sample.locId, sample);\n        }\n    }\n\n    return samples;\n}\n\nasync function convertEsriGeometryPolygonToLatLngList(promise) {\n    let esriGeometry = promise.data\n    var dataCordsQueryParam = '';\n    if (esriGeometry != null && esriGeometry.results != null && esriGeometry.results.length > 0\n        && esriGeometry.results[0].geometryType != null && esriGeometry.results[0].geometryType === (\"esriGeometryPolygon\")) {\n        esriGeometry.results[0].geometry.rings[0].forEach((lngLat) => {\n            dataCordsQueryParam += lngLat[0] + ',' + lngLat[1] + ';'\n        });\n    }\n\n    dataCordsQueryParam = dataCordsQueryParam.substring(0, dataCordsQueryParam.length - 1); // remove final semicolon\n\n    let url = `https://epsg.io/trans?data=${dataCordsQueryParam}&s_srs=3857&t_srs=4326`\n    return await axios.get(url).catch(error => {console.log(error)});\n}\n\nfunction getLocationDataFromXml(xml) {\n    let parsedResult = new DOMParser().parseFromString(xml, \"text/xml\");\n    let locations = parsedResult.getElementsByTagName(\"MonitoringLocation\");\n    let samples = new Map();\n    for (let location of locations) {\n\t    let sample = new Point()\n        const getTagValue = (qualifiedName) => {\n            let tag = location.getElementsByTagName(qualifiedName)[0];\n            return (tag === undefined) ? null :tag.childNodes[0].nodeValue;\n        };\n\n        sample.locId = getTagValue(\"MonitoringLocationIdentifier\");\n\t    sample.name = getTagValue(\"MonitoringLocationName\");\n        sample.lat = getTagValue(\"LatitudeMeasure\");\n        sample.long = getTagValue(\"LongitudeMeasure\");\n\n        let existing = samples[sample.locId];\n        if (existing == null || (Date.parse(sample.date) > Date.parse(existing.date))) {\n            samples.set(sample.locId, sample);\n        }\n    }\n\n    return samples;\n}\n\nasync function getFibiData(huc) {\n    var isHuc12 = huc.length === 12;\n    var huc8 = huc.substring(0, 8);\n    var url = FIBI_URL;\n\n    return axios\n        .get(url + huc8)\n        .then(response => {\n            return response.data;\n        })\n        .then(sites => {\n            if (isHuc12) {\n                var filteredSites = sites.filter(site => site.huc12 === huc);\n                return Promise.resolve(filteredSites);\n            }\n            return Promise.resolve(sites);\n        })\n        .then(sites => {\n            return sites.map(site => site.id);\n        })\n        .then(siteIds => {\n            return Promise.all(siteIds.map(fetchFibiDataBySiteId));\n        })\n        .catch(function(error) {\n            // handle error\n            console.log(error);\n            return ERROR_SHE_GET_WET;\n        });\n}\n\nasync function fetchFibiDataBySiteId(siteId) {\n    var url = FIBI_BY_SITE_URL;\n    return axios.get(url + siteId).then(response => {\n        return response.data;\n    }).then(results => {\n        // sort\n        return results.sort((a, b) => {\n            return new Date(b.sampleDate) - new Date(a.sampleDate);\n        });\n    }).then(results => {\n        // most recent\n        return results[0];\n    }).then(result => {\n        var fibiSite = new Point();\n        fibiSite.name = result.site.name + \" - \" + result.site.landmark;\n        fibiSite.lat = result.site.LatDD;\n        fibiSite.long = result.site.LongDD;\n\n        var fibiData = new Data();\n        fibiData.name = \"FIBI\";\n        fibiData.unit = \"rating\";\n        fibiData.value = result.FIBI;\n        fibiData.type = result.FIBIType;\n        fibiData.class = result.FIBIClass;\n        fibiData.date = result.sampleDate;\n\n        fibiSite.datas.push(fibiData);\n        return fibiSite;\n    }).catch(error => {\n        console.log(error);\n    });\n}\n\nasync function getEpaStations(huc, characteristicName) {\n    let query = EPA_URL + `startDateLo=${dateTwoMonthsAgo()}&huc=${huc}&mimeType=xml&characteristicName=${characteristicName}`;\n    return axios\n        .get(query)\n        .then(function(response) {\n            // handle success\n            return response;\n        })\n        .catch(function(error) {\n            // handle error\n            return ERROR_SHE_GET_WET;\n        });\n}\n\nasync function getSampleResults(huc, characteristicName) {\n    var url = SAMPLE_RESULTS_URL + `startDateLo=${dateTwoMonthsAgo()}&huc=${huc}&mimeType=xml&characteristicName=${characteristicName}`;\n    return axios.get(url).then().catch(error => {\n        console.log(error);\n    });\n}\n\nfunction dateTwoMonthsAgo() {\n    let startDateLo = new Date();\n    startDateLo.setMonth(startDateLo.getMonth() - 2);\n    return startDateLo.toLocaleDateString().replace(/\\//g, '-')\n}\n\nasync function getHuc(lat, long) {}\n\nexport default {\n    getEcoliData,\n    getNitrateData,\n    getFibiData,\n    getEpaStations,\n    getSampleResults,\n    getHuc,\n    convertEsriGeometryPolygonToLatLngList\n};\n","import React, { Component } from \"react\";\nimport { GoogleApiWrapper } from 'google-maps-react';\nimport \"./App.css\";\n\nimport PlottedMap from \"./ui-core/components/map\";\nimport Header from \"./ui-core/components/header\";\nimport AddressModal from \"./ui-core/modals/address\";\nimport { HEADER_TITLE } from \"./ui-core/constants/header\";\nimport { DRINKING_LAYER } from \"./constants_shared/layers\";\nimport { SWIMMING_LAYER } from \"./constants_shared/layers\";\nimport ActivityTypeRadio from \"./ui-core/components/radio-activity-type\";\nimport getHucBorder from \"./server-core/border-data-api\";\nimport getHucFromAddress from \"./server-core/location-service\";\nimport API from \"./server-core/api-client\";\n\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport queryString from 'query-string'\nimport { async } from \"q\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: blue,\n        secondary: {\n            main: \"#84ffff\"\n        }\n    },\n    typography: {\n        useNextVariants: true\n    }\n});\n\nconst AppRouting = () => (\n    <Router>\n        <Route exact path=\"/\" component={App} />\n    </Router>\n);\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            coordinatesList: [],\n            dataPointsToPlot: [],\n            ecoliData: [],\n            nitrateData: [],\n            fibiData: [],\n            selectedLayer: DRINKING_LAYER,\n            activity: \"drink\",\n            showModal: true\n        };\n    }\n\n    defaultDataPointsToPlot(nitrateData) {\n\n    }\n\n    // componentDidMount() {\n    //     console.log(this.props.location);\n    //     const values = queryString.parse(this.props.location.search);\n    //     if ([\"fish\", \"drink\", \"swim\"].includes(values.activity)) {\n    //         this.setState({activity: values.activity});\n    //     }\n    // }\n\n    handleSubmit = async (address) => {\n        let hucId = await getHucFromAddress(address);\n        let hucBorder = await getHucBorder(hucId, \"huc_12\");\n\n        let latlngs = (await API.convertEsriGeometryPolygonToLatLngList(hucBorder)).data;\n        let coords = [];\n        for (var latlng of latlngs) {\n            let loc = {};\n            loc.lat = Number(latlng.y);\n            loc.lng = Number(latlng.x);\n            coords.push(loc);\n        }\n\n        this.setState({\n            coordinatesList: coords,\n            showModal: false\n\n        });\n\n        let nitratePoints = await API.getNitrateData(hucId);\n        let ecoliPoints = await API.getEcoliData(hucId);\n\n        this.setState({\n            ecoliData: ecoliPoints,\n            nitrateData: nitratePoints,\n            fibiData: await API.getFibiData(hucId)\n        });\n\n        this.setState({\n            dataPointsToPlot: nitratePoints\n        });\n    };\n\n    renderModal() {\n        if (this.state.showModal) {\n            return <AddressModal\n                handleClose={() => { }}\n                show={true}\n                setCoordinatesList={(coordinatesList) => {\n                    this.setCoordinatesList(coordinatesList)\n                }}\n                handleSubmit={this.handleSubmit}\n                setAddress={this.setAddress}\n            />\n        } else {\n            return null\n        }\n    }\n\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <div className=\"App\">\n                    <Header title={HEADER_TITLE} />\n                    <PlottedMap google={this.props.google} coordinatesList={this.state.coordinatesList} dataPointsToPlot={this.state.dataPointsToPlot} />\n                    <ActivityTypeRadio handleClose={() => { }}\n                        show={true}\n                        value={this.state.activity}\n                    />\n                    {this.renderModal()}\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: ('AIzaSyBbQM-FxetsrzMqbJ2xzZbcbDUb9Au4nh4')\n})(App)\n","export const HEADER_TITLE = \"Find Water Quality Data Near Me\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}