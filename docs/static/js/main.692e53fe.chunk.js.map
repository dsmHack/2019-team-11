{"version":3,"sources":["ui-core/dux/address.js","ui-core/dux/layer.js","ui-core/dux/index.js","ui-core/dux/store.js","ui-core/components/map.js","ui-core/components/header.js","ui-core/modals/address.js","ui-core/constants/address.js","constants_shared/layers.js","ui-core/components/layer-selection.js","server-core/api-client.js","theme.js","App.js","ui-core/constants/header.js","serviceWorker.js","index.js"],"names":["ADD_ADDRESS","SHOW_MODAL","HIDE_MODAL","initialState","address","showAddressModal","actions","addAddress","type","payload","showModal","hideModal","FISH_LAYER","DRINKING_LAYER","SWIMMING_LAYER","Layers","fish","drinking","swimming","selectedLayer","setLayer","state","layer","Object","objectSpread","combineReducers","arguments","length","undefined","_ref","enhancers","compose","applyMiddleware","thunkMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","PlottedMap","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","markers","shouldCreateMarkers","dataPointsToPlot","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","dataPoint","value","push","createMarker","err","return","point","console","log","actualPoint","url","locId","react_default","a","createElement","dist","key","position","lat","lng","long","icon","anchor","google","maps","Point","scaledSize","Size","createMarkers","zoom","initialCenter","paths","coordinatesList","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","renderMarkers","Component","Header","title","className","AppBar_default","connect","Card_default","style","display","CardHeader_default","CardContent_default","TextField_default","onChange","e","target","placeholder","CardActions_default","Button_default","size","variant","color","onClick","selectLayer","FormControl_default","component","FormLabel_default","RadioGroup_default","aria-label","name","event","FormControlLabel_default","control","Radio_default","label","AppTheme","createMuiTheme","palette","primary","blue","secondary","main","typography","useNextVariants","App","ecoliData","nitrateData","fibiData","activity","_this2","ui_core_modals_address","handleClose","show","setCoordinatesList","handleSubmit","setAddress","es","styles","theme","components_header","map","layer_selection","renderModal","GoogleApiWrapper","apiKey","process","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.692e53fe.chunk.js","sourcesContent":["const ADD_ADDRESS = \"ADD_ADDRESS\";\r\nconst SHOW_MODAL = \"SHOW_MODAL\";\r\nconst HIDE_MODAL = \"HIDE_MODAL\";\r\n\r\nconst initialState = {\r\n    address: \"\",\r\n    showAddressModal: true\r\n}\r\n\r\nexport const actions = {\r\n    addAddress(address) {\r\n        return { type: ADD_ADDRESS, payload: address }\r\n    },\r\n    showModal(){\r\n        return {type: SHOW_MODAL}\r\n    },\r\n    hideModal(){\r\n        return {type: HIDE_MODAL}\r\n    }\r\n}\r\n\r\nexport function reducer(state = initialState, { type, payload }) {\r\n    switch (type) {\r\n        case ADD_ADDRESS: {\r\n            return {\r\n                ...state,\r\n                address: payload\r\n            }\r\n        }\r\n        case SHOW_MODAL: {\r\n            return {\r\n                ...state,\r\n                showAddressModal: true\r\n            }\r\n        }\r\n        case HIDE_MODAL: {\r\n            return {\r\n                ...state,\r\n                showAddressModal: false\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","const FISH_LAYER = \"FISH_LAYER\";\r\nconst DRINKING_LAYER = \"DRINKING_LAYER\";\r\nconst SWIMMING_LAYER = \"SWIMMING_LAYER\";\r\nexport const Layers = { fish: FISH_LAYER, drinking: DRINKING_LAYER, swimming: SWIMMING_LAYER }\r\n\r\nconst initialState = {\r\n    selectedLayer: DRINKING_LAYER\r\n}\r\n\r\nexport const actions = {\r\n    selectLayer(layer) {\r\n        return { type: layer }\r\n    }\r\n}\r\n\r\nexport function reducer(state = initialState, { type, payload }) {\r\n    switch (type) {\r\n        case FISH_LAYER: {\r\n            return setLayer(state, FISH_LAYER);\r\n        }\r\n        case DRINKING_LAYER: {\r\n            return setLayer(state, DRINKING_LAYER);\r\n        }\r\n        case SWIMMING_LAYER: {\r\n            return setLayer(state, SWIMMING_LAYER);\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nfunction setLayer(state, layer) {\r\n    return {\r\n        ...state,\r\n        selectedLayer: layer\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport * as address from \"./address\";\r\nimport * as layer from \"./layer\";\r\n\r\nexport default combineReducers({ address: address.reducer, layer: layer.reducer });","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport rootReducer from \"./index\";\r\n\r\nconst initialState = {};\r\n\r\nconst enhancers = compose(\r\n    applyMiddleware(thunkMiddleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    enhancers\r\n);\r\n\r\nexport default store;","import React, {Component} from \"react\"\r\nimport { Map, Marker, Polygon } from 'google-maps-react';\r\n\r\nclass PlottedMap extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.markers = []\r\n        this.shouldCreateMarkers = true;\r\n    }\r\n\r\n    createMarkers() {\r\n        if(this.props.dataPointsToPlot !== undefined && this.props.dataPointsToPlot !== []){\r\n            for(var dataPoint of this.props.dataPointsToPlot){\r\n                this.markers.push(this.createMarker(dataPoint));\r\n            };\r\n            if(this.markers.length > 0){\r\n\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    createMarker(point) {\r\n        console.log(\"Point\", point);\r\n        const actualPoint = point[1];\r\n        let url = \"/images/low.png\";\r\n        if(actualPoint.locId === \"PCCB_WQX-977082\"){\r\n            url = \"/images/med.png\";\r\n        }\r\n        return <Marker\r\n            key={actualPoint.locId}\r\n            position={{ lat: actualPoint.lat, lng: actualPoint.long }}\r\n            icon={{\r\n                url: url,\r\n                anchor: new window.google.maps.Point(24, 24),\r\n                scaledSize: new window.google.maps.Size(48, 48)\r\n            }}\r\n        />\r\n    }\r\n\r\n    renderMarkers() {\r\n        if(this.shouldCreateMarkers){\r\n            this.createMarkers();\r\n        }\r\n\r\n        if(this.markers.length > 0 ){\r\n            console.log(\"render Markers: \", this.markers);\r\n            return this.markers\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Map\r\n                google={this.props.google}\r\n                zoom={13}\r\n                initialCenter={{ lat: 41.583586, lng: -93.628419 }}>\r\n\r\n                <Polygon\r\n                    paths={this.props.coordinatesList}\r\n                    strokeColor=\"#0000FF\"\r\n                    strokeOpacity={0.8}\r\n                    strokeWeight={2}\r\n                    fillColor=\"#0000FF\"\r\n                    fillOpacity={0.35} />\r\n\r\n                {this.renderMarkers()}\r\n\r\n            </Map>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlottedMap;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport \"./header.css\";\r\n\r\nconst Header = props => {\r\n    const { title } = props;\r\n    return (\r\n        <div className=\"header\">\r\n            <AppBar position=\"static\">\r\n                <label>{title}</label>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { ADDRESS_MODAL_TITLE, ADDRESS_MODAL_INPUT_PLACEHOLDER } from \"../constants/address\";\r\nimport \"./address.css\";\r\n\r\nimport { actions } from \"../dux/address\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        address: state.address.address,\r\n        showAddressModal: state.address.showAddressModal\r\n    };\r\n}\r\n\r\nconst AddressModal = props => {\r\n    return (\r\n        <Card className=\"modal\" style={displayModal()}>\r\n            <CardHeader className=\"title\" title={ADDRESS_MODAL_TITLE} />\r\n            <CardContent>\r\n                <TextField\r\n                    className=\"address\"\r\n                    type=\"text\"\r\n                    onChange={handleOnChange}\r\n                    placeholder={ADDRESS_MODAL_INPUT_PLACEHOLDER}\r\n                />\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button\r\n                    className=\"nextButton\"\r\n                    size=\"medium\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleSubmit}\r\n                >\r\n                    NEXT\r\n                </Button>\r\n                ;\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n\r\n    function handleSubmit(){\r\n        props.hideModal();\r\n    }\r\n\r\n    function handleOnChange(e) {\r\n        props.addAddress(e.target.value);\r\n    }\r\n\r\n    function displayModal() {\r\n        return props.showAddressModal ? { display: \"block\" } : { display: \"none\" };\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    actions\r\n)(AddressModal);\r\n","export const ADDRESS_MODAL_TITLE = 'TYPE YOUR ADDRESS';\r\nexport const ADDRESS_MODAL_INPUT_PLACEHOLDER = 'Enter Address Here...';","export const FISH_LAYER = \"fish\";\r\nexport const SWIMMING_LAYER = \"swimming\";\r\nexport const DRINKING_LAYER = \"drinking\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { actions, Layers } from \"../dux/layer\";\r\nimport { connect } from 'react-redux';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        selectedLayer: state.selectedLayer\r\n    }\r\n}\r\n\r\nconst LayerSelection = (props) => {\r\n    return (\r\n        <div className=''>\r\n            <FormControl component=\"fieldset\" className=''>\r\n                <FormLabel component=\"legend\">Select activity of interest:</FormLabel>\r\n                <RadioGroup\r\n                    aria-label=\"Activity\"\r\n                    name=\"activity_type\"\r\n                    className=''\r\n                    value={props.value}\r\n                    onChange={handleChange}\r\n                >\r\n                    <FormControlLabel value={Layers.fish} control={<Radio />} label=\"Fishing\" />\r\n                    <FormControlLabel value={Layers.swimming} control={<Radio />} label=\"Swimming\" />\r\n                    <FormControlLabel value={Layers.drinking} control={<Radio />} label=\"Drinking\" />\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n\r\n    function handleChange(event) {\r\n        props.selectLayer(event.target.value);\r\n    };\r\n}\r\n\r\nLayerSelection.propTypes = {\r\n    handleClose: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n};\r\nexport default connect(mapStateToProps, actions)(LayerSelection);","import axios from \"axios\";\r\nimport {\r\n    FIBI_URL,\r\n    FIBI_BY_SITE_URL,\r\n    EPA_URL,\r\n    SAMPLE_RESULTS_URL,\r\n    ERROR_SHE_GET_WET\r\n} from \"./constants/urls\";\r\nimport Data from \"./models/data\";\r\nimport Point from \"./models/point\";\r\n\r\n// axios.defaults.timeout = 1000000000;\r\n\r\nasync function getEcoliData(huc) {\r\n    return baseEpaQuery(huc, \"Escherichia%20coli\");\r\n}\r\n\r\nasync function getNitrateData(huc) {\r\n    return baseEpaQuery(huc, \"Nitrate\");\r\n}\r\n\r\nasync function baseEpaQuery(huc, charName) {\r\n    let sampleResult = await getSampleResults(huc, charName);\r\n    let dataSamples = getValueDataFromXml(sampleResult.data)\r\n\r\n    let locationResult = await getEpaStations(huc, charName);\r\n    let pointSamples = getLocationDataFromXml(locationResult.data)\r\n\r\n    for (let key of pointSamples.keys()) {\r\n        let data = dataSamples.get(key);\r\n        if (data !== undefined) {\r\n            pointSamples.get(key).datas.push(data);\r\n        }\r\n    }\r\n\r\n    return pointSamples;\r\n}\r\n\r\nfunction getValueDataFromXml(xml) {\r\n    let parsedResult = new DOMParser().parseFromString(xml, \"text/xml\");\r\n    let activities = parsedResult.getElementsByTagName(\"Activity\");\r\n    let samples = new Map();\r\n    for (let activity of activities) {\r\n\t    let sample = new Data();\r\n        const getTagValue = (qualifiedName) => {\r\n            let tag = activity.getElementsByTagName(qualifiedName)[0];\r\n            return (tag === undefined) ? null :tag.childNodes[0].nodeValue;\r\n        };\r\n\r\n        sample.name = getTagValue(\"CharacteristicName\");\r\n\t    sample.locId = getTagValue(\"MonitoringLocationIdentifier\");\r\n        sample.date = getTagValue(\"ActivityStartDate\");\r\n        sample.value = getTagValue(\"ResultMeasureValue\");\r\n\t    sample.unit = getTagValue(\"MeasureUnitCode\");\r\n\r\n        let existing = samples[sample.locId];\r\n        if (existing == null || (Date.parse(sample.date) > Date.parse(existing.date))) {\r\n            samples.set(sample.locId, sample);\r\n        }\r\n    }\r\n\r\n    return samples;\r\n}\r\n\r\nasync function convertEsriGeometryPolygonToLatLngList(promise) {\r\n    let esriGeometry = promise.data\r\n    var dataCordsQueryParam = '';\r\n    if (esriGeometry != null && esriGeometry.results != null && esriGeometry.results.length > 0\r\n        && esriGeometry.results[0].geometryType != null && esriGeometry.results[0].geometryType === (\"esriGeometryPolygon\")) {\r\n        esriGeometry.results[0].geometry.rings[0].forEach((lngLat) => {\r\n            dataCordsQueryParam += lngLat[0] + ',' + lngLat[1] + ';'\r\n        });\r\n    }\r\n\r\n    dataCordsQueryParam = dataCordsQueryParam.substring(0, dataCordsQueryParam.length - 1); // remove final semicolon\r\n\r\n    let url = `https://epsg.io/trans?data=${dataCordsQueryParam}&s_srs=3857&t_srs=4326`\r\n    return await axios.get(url).catch(error => {console.log(error)});\r\n}\r\n\r\nfunction getLocationDataFromXml(xml) {\r\n    let parsedResult = new DOMParser().parseFromString(xml, \"text/xml\");\r\n    let locations = parsedResult.getElementsByTagName(\"MonitoringLocation\");\r\n    let samples = new Map();\r\n    for (let location of locations) {\r\n\t    let sample = new Point()\r\n        const getTagValue = (qualifiedName) => {\r\n            let tag = location.getElementsByTagName(qualifiedName)[0];\r\n            return (tag === undefined) ? null :tag.childNodes[0].nodeValue;\r\n        };\r\n\r\n        sample.locId = getTagValue(\"MonitoringLocationIdentifier\");\r\n\t    sample.name = getTagValue(\"MonitoringLocationName\");\r\n        sample.lat = getTagValue(\"LatitudeMeasure\");\r\n        sample.long = getTagValue(\"LongitudeMeasure\");\r\n\r\n        let existing = samples[sample.locId];\r\n        if (existing == null || (Date.parse(sample.date) > Date.parse(existing.date))) {\r\n            samples.set(sample.locId, sample);\r\n        }\r\n    }\r\n\r\n    return samples;\r\n}\r\n\r\nasync function getFibiData(huc) {\r\n    var isHuc12 = huc.length === 12;\r\n    var huc8 = huc.substring(0, 8);\r\n    var url = FIBI_URL;\r\n\r\n    return axios\r\n        .get(url + huc8)\r\n        .then(response => {\r\n            return response.data;\r\n        })\r\n        .then(sites => {\r\n            if (isHuc12) {\r\n                var filteredSites = sites.filter(site => site.huc12 === huc);\r\n                return Promise.resolve(filteredSites);\r\n            }\r\n            return Promise.resolve(sites);\r\n        })\r\n        .then(sites => {\r\n            return sites.map(site => site.id);\r\n        })\r\n        .then(siteIds => {\r\n            return Promise.all(siteIds.map(fetchFibiDataBySiteId));\r\n        })\r\n        .catch(function(error) {\r\n            // handle error\r\n            console.log(error);\r\n            return ERROR_SHE_GET_WET;\r\n        });\r\n}\r\n\r\nasync function fetchFibiDataBySiteId(siteId) {\r\n    var url = FIBI_BY_SITE_URL;\r\n    return axios.get(url + siteId).then(response => {\r\n        return response.data;\r\n    }).then(results => {\r\n        // sort\r\n        return results.sort((a, b) => {\r\n            return new Date(b.sampleDate) - new Date(a.sampleDate);\r\n        });\r\n    }).then(results => {\r\n        // most recent\r\n        return results[0];\r\n    }).then(result => {\r\n        var fibiSite = new Point();\r\n        fibiSite.name = result.site.name + \" - \" + result.site.landmark;\r\n        fibiSite.lat = result.site.LatDD;\r\n        fibiSite.long = result.site.LongDD;\r\n\r\n        var fibiData = new Data();\r\n        fibiData.name = \"FIBI\";\r\n        fibiData.unit = \"rating\";\r\n        fibiData.value = result.FIBI;\r\n        fibiData.type = result.FIBIType;\r\n        fibiData.class = result.FIBIClass;\r\n        fibiData.date = result.sampleDate;\r\n\r\n        fibiSite.datas.push(fibiData);\r\n        return fibiSite;\r\n    }).catch(error => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nasync function getEpaStations(huc, characteristicName) {\r\n    let query = EPA_URL + `startDateLo=${dateTwoMonthsAgo()}&huc=${huc}&mimeType=xml&characteristicName=${characteristicName}`;\r\n    return axios\r\n        .get(query)\r\n        .then(function(response) {\r\n            // handle success\r\n            return response;\r\n        })\r\n        .catch(function(error) {\r\n            // handle error\r\n            return ERROR_SHE_GET_WET;\r\n        });\r\n}\r\n\r\nasync function getSampleResults(huc, characteristicName) {\r\n    var url = SAMPLE_RESULTS_URL + `startDateLo=${dateTwoMonthsAgo()}&huc=${huc}&mimeType=xml&characteristicName=${characteristicName}`;\r\n    return axios.get(url).then().catch(error => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nfunction dateTwoMonthsAgo() {\r\n    let startDateLo = new Date();\r\n    startDateLo.setMonth(startDateLo.getMonth() - 2);\r\n    return startDateLo.toLocaleDateString().replace(/\\//g, '-')\r\n}\r\n\r\nasync function getHuc(lat, long) {}\r\n\r\nexport default {\r\n    getEcoliData,\r\n    getNitrateData,\r\n    getFibiData,\r\n    getEpaStations,\r\n    getSampleResults,\r\n    getHuc,\r\n    convertEsriGeometryPolygonToLatLngList\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\n\r\nconst AppTheme = createMuiTheme({\r\n    palette: {\r\n        primary: blue,\r\n        secondary: {\r\n            main: \"#84ffff\"\r\n        }\r\n    },\r\n    typography: {\r\n        useNextVariants: true\r\n    }\r\n});\r\n\r\nexport default AppTheme;","import React, { Component } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./ui-core/dux/store\";\r\nimport { GoogleApiWrapper } from 'google-maps-react';\r\nimport \"./App.css\";\r\n\r\nimport PlottedMap from \"./ui-core/components/map\";\r\nimport Header from \"./ui-core/components/header\";\r\nimport AddressModal from \"./ui-core/modals/address\";\r\nimport { HEADER_TITLE } from \"./ui-core/constants/header\";\r\nimport { DRINKING_LAYER } from \"./constants_shared/layers\";\r\nimport LayerSelection from \"./ui-core/components/layer-selection\";\r\nimport getHucBorder from \"./server-core/border-data-api\";\r\nimport getHucFromAddress from \"./server-core/location-service\";\r\nimport API from \"./server-core/api-client\";\r\nimport AppTheme from \"./theme\";\r\n\r\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            coordinatesList: [],\r\n            dataPointsToPlot: [],\r\n            ecoliData: [],\r\n            nitrateData: [],\r\n            fibiData: [],\r\n            selectedLayer: DRINKING_LAYER,\r\n            activity: \"drink\",\r\n            showModal: true\r\n        };\r\n    }\r\n\r\n    defaultDataPointsToPlot(nitrateData) {\r\n\r\n    }\r\n\r\n    renderModal() {\r\n        if (this.state.showModal) {\r\n            return <AddressModal\r\n                handleClose={() => { }}\r\n                show={true}\r\n                setCoordinatesList={(coordinatesList) => {\r\n                    this.setCoordinatesList(coordinatesList)\r\n                }}\r\n                handleSubmit={() => {}}\r\n                setAddress={this.setAddress}\r\n            />\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <MuiThemeProvider theme={AppTheme}>\r\n                    <div className=\"App\">\r\n                        <Header title={HEADER_TITLE} />\r\n                        <PlottedMap google={this.props.google} coordinatesList={this.state.coordinatesList} dataPointsToPlot={this.state.dataPointsToPlot} />\r\n                        <LayerSelection handleClose={() => { }}\r\n                            show={true}\r\n                            value={this.state.activity}\r\n                        />\r\n                        {this.renderModal()}\r\n                    </div>\r\n                </MuiThemeProvider>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nconst loadAPIKey = () => {\r\n    if (process.env.NODE_ENV === \"development\") {\r\n        return process.env.REACT_APP_DEV_GOOGLE_MAPS;\r\n    }\r\n    return process.env.REACT_APP_PROD_GOOGLE_MAPS;\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: (loadAPIKey())\r\n})(App)\r\n","export const HEADER_TITLE = \"Find Water Quality Data Near Me\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'typeface-roboto';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}