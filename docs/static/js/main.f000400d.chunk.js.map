{"version":3,"sources":["ui-core/components/map.js","ui-core/components/header.js","ui-core/modals/address.js","ui-core/constants/address.js","constants_shared/layers.js","ui-core/components/radio-activity-type.js","server-core/border-data-api.js","server-core/constants/urls.js","server-core/location-service.js","server-core/models/data.js","server-core/models/point.js","server-core/api-client.js","App.js","ui-core/constants/header.js","serviceWorker.js","index.js"],"names":["PlottedMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dataPointsToPlot","coordinatesList","_this2","undefined","forEach","dataPoint","createMarker","point","react_default","a","createElement","dist","position","lat","lng","icon","url","anchor","window","google","maps","Point","scaledSize","Size","console","log","zoom","initialCenter","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","createMarkers","Component","Header","title","className","AppBar_default","AddressModal","address","handleChange","bind","assertThisInitialized","handleKeyPress","target","_ref","setState","value","event","key","handleSubmit","Card_default","CardHeader_default","CardContent_default","TextField_default","type","placeholder","onChange","onKeyPress","CardActions_default","Button_default","size","variant","color","onClick","DRINKING_LAYER","ActivityTypeRadio","classes","root","FormControl_default","component","formControl","FormLabel_default","RadioGroup_default","aria-label","name","group","FormControlLabel_default","control","Radio_default","label","React","withStyles","theme","display","margin","spacing","unit","concat","top","left","_callee","hucid","hucType","regenerator_default","wrap","_context","prev","next","abrupt","axios","get","then","response","catch","error","stop","getHucBorder","FIBI_URL","FIBI_BY_SITE_URL","EPA_URL","SAMPLE_RESULTS_URL","ERROR_SHE_GET_WET","ERROR_ADDRESS_NOT_FOUND","ERROR_WATERSHED_NOT_FOUND","HUC_FROM_ADDRESS_URL","WATERSHED_DATA_URL","params","outFields","outSR","latestWkid","wkid","f","SingleLine","data","candidates","Promise","reject","firstCandidate","spatialReference","x","location","y","getWatershedData","_callee2","_context2","spatialRel","where","geometryType","inSR","geometry","features","attributes","HUC12","getHucFromAddress","Data","date","locId","long","datas","huc","baseEpaQuery","_callee3","charName","sampleResult","dataSamples","locationResult","pointSamples","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_context3","getSampleResults","sent","getValueDataFromXml","getEpaStations","getLocationDataFromXml","keys","Symbol","iterator","done","push","t0","return","finish","xml","activities","DOMParser","parseFromString","getElementsByTagName","samples","Map","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","activity","sample","getTagValue","qualifiedName","tag","childNodes","nodeValue","existing","Date","parse","set","_iterator","err","_callee4","promise","esriGeometry","dataCordsQueryParam","_context4","results","length","rings","lngLat","substring","locations","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","_iterator2","_callee5","isHuc12","huc8","_context5","sites","filteredSites","filter","site","huc12","resolve","map","id","siteIds","all","fetchFibiDataBySiteId","_callee6","siteId","_context6","sort","b","sampleDate","result","fibiSite","landmark","LatDD","LongDD","fibiData","FIBI","FIBIType","class","FIBIClass","_callee7","characteristicName","query","_context7","dateTwoMonthsAgo","_callee8","_context8","startDateLo","setMonth","getMonth","toLocaleDateString","replace","_callee9","_context9","api_client","getEcoliData","getNitrateData","getFibiData","getHuc","convertEsriGeometryPolygonToLatLngList","createMuiTheme","palette","primary","blue","secondary","main","typography","useNextVariants","App","asyncToGenerator","mark","hucId","hucBorder","latlngs","coords","latlng","loc","nitratePoints","API","Number","t1","t2","t3","t4","t5","ecoliData","nitrateData","_x","apply","arguments","selectedLayer","styles","components_header","radio_activity_type","handleClose","show","ui_core_modals_address","setCoordinatesList","setAddress","GoogleApiWrapper","apiKey","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f000400d.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport { Map, Marker, Polygon } from 'google-maps-react';\n\nclass PlottedMap extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            dataPointsToPlot: props.dataPointsToPlot,\n            coordinatesList: props.coordinatesList\n        };\n    }\n\n    createMarkers() {\n        if(this.state.dataPointsToPlot != undefined){\n            this.state.dataPointsToPlot.forEach(dataPoint => {\n                return this.createMarker(dataPoint);\n            });\n        }\n        \n    }\n\n    createMarker(point) {\n        return <Marker\n            position={{ lat: point.lat, lng: point.lng }}\n            icon={{\n                url: \"/images/low.png\",\n                anchor: new window.google.maps.Point(24, 24),\n                scaledSize: new window.google.maps.Size(48, 48)\n            }}\n        />\n    }\n\n    render() {\n        console.log('map render', this.props.coordinatesList);\n        return (\n            <Map\n                google={this.props.google}\n                zoom={17}\n                initialCenter={{ lat: 41.583586, lng: -93.628419 }}>\n\n                <Polygon\n                    paths={this.props.coordinatesList}\n                    strokeColor=\"#0000FF\"\n                    strokeOpacity={0.8}\n                    strokeWeight={2}\n                    fillColor=\"#0000FF\"\n                    fillOpacity={0.35} />\n\n                {this.createMarkers()}\n\n            </Map>\n        )\n    }\n}\n\nexport default PlottedMap;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport \"./header.css\";\n\nconst Header = props => {\n    const { title } = props;\n    return (\n        <div className=\"header\">\n            <AppBar position=\"static\">\n                <label>{title}</label>\n            </AppBar>\n        </div>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {\n    ADDRESS_MODAL_TITLE,\n    ADDRESS_MODAL_INPUT_PLACEHOLDER\n} from \"../constants/address\";\nimport \"./address.css\";\n\nclass AddressModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: \"\"\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        // this.handleOnClick = this.handleOnClick.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n\n    handleChange({ target }) {\n        this.setState({\n            address: target.value\n        });\n    }\n\n\n    // async handleOnClick(){\n    //     await this.props.handleSubmit(this.state.address);\n    // }\n\n    async handleKeyPress(event) {\n\tif(event.key === 'Enter'){\n\t    await this.props.handleSubmit(this.state.address);\n        }\n    }\n    \n    render() {\n        return (\n            <Card className=\"modal\">\n                <CardHeader className=\"title\" title={ADDRESS_MODAL_TITLE} />\n                <CardContent>\n                    <TextField\n                        className=\"address\"\n                        type=\"text\"\n                        value={this.state.address}\n                        placeholder={ADDRESS_MODAL_INPUT_PLACEHOLDER}\n                        onChange={this.handleChange}\n\t    onKeyPress={this.handleKeyPress}\n                />\n                </CardContent>\n                <CardActions>\n                    <Button\n                        className=\"nextButton\"\n                        size=\"medium\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => this.props.handleSubmit(this.state.address)}\n                    >\n                        NEXT\n            </Button>;\n                </CardActions>\n            </Card>\n        );\n    }\n}\n\n\n\nAddressModal.propTypes = {\n    handleClose: PropTypes.func.isRequired,\n    show: PropTypes.bool.isRequired\n};\n\nexport default AddressModal;\n","export const ADDRESS_MODAL_TITLE = 'TYPE YOUR ADDRESS';\nexport const ADDRESS_MODAL_INPUT_PLACEHOLDER = 'Enter Address Here...';","export const FISH_LAYER = \"fish\";\nexport const SWIMMING_LAYER = \"swimming\";\nexport const DRINKING_LAYER = \"drinking\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport CardHeader from \"../modals/address\";\nimport {ADDRESS_MODAL_TITLE} from \"../constants/address\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n    },\n    formControl: {\n        margin: theme.spacing.unit * 3,\n    },\n    group: {\n        margin: `${theme.spacing.unit}px 0`,\n    },\n    position: 'absolute',\n    top: 0,    // computed based on child and parent's height\n    left: 0\n});\n\nclass ActivityTypeRadio extends React.Component {\n    handleChange = event => {\n        this.setState({value: event.target.value});\n    };\n\n    render() {\n        const {classes} = this.props;\n\n        return (\n            //<Card className=\"modal\">\n              //  <CardContent>\n                    <div className={classes.root}>\n                        <FormControl component=\"fieldset\" className={classes.formControl}>\n                            <FormLabel component=\"legend\">Select activity of interest:</FormLabel>\n                            <RadioGroup\n                                aria-label=\"Activity\"\n                                name=\"activity_type\"\n                                className={classes.group}\n                                value={this.props.value}\n                                onChange={this.handleChange}\n                            >\n                                <FormControlLabel value=\"fish\" control={<Radio/>} label=\"Fishing\"/>\n                                <FormControlLabel value=\"swim\" control={<Radio/>} label=\"Swimming\"/>\n                                <FormControlLabel value=\"drink\" control={<Radio/>} label=\"Drinking\"/>\n                            </RadioGroup>\n                        </FormControl>\n                    </div>\n                //</CardContent>\n           // </Card>\n        );\n    }\n}\n\nActivityTypeRadio.propTypes = {\n    handleClose: PropTypes.func.isRequired,\n    show: PropTypes.bool.isRequired\n};\nexport default withStyles(styles)(ActivityTypeRadio);","import axios from 'axios';\n\nasync function getHucBorder(hucid, hucType) {\n\n    let url = \"https://watersgeo.epa.gov/arcgis/rest/services/NHDPlus_NP21/WBD_NP21_Simplified/MapServer/find?searchText=\" +\n        hucid + \"&contains=true&searchFields=&sr=&layers=\" +\n        hucType + \"&layerDefs=&returnGeometry=true&maxAllowableOffset=&geometryPrecision=&dynamicLayers=&returnZ\" +\n        \"=false&returnM=false&gdbVersion=&returnUnformattedValues=false&returnFieldName=false&datumTransformations\" +\n        \"=&layerParameterValues=&mapRangeValues=&layerRangeValues=&f=pjson\";\n\n   return axios.get(url).then((response) => {\n        return response;\n    })\n        .catch((error) => {\n            console.log(error);\n            return \"will the water kill me?\";\n        });\n}\n\nexport default getHucBorder;\n","export const ECOLI_URL = \"https://www.waterqualitydata.us/data/Result/search?\";\nexport const FIBI_URL =\n    \"https://programs.iowadnr.gov/bionet/api/v1/sites/by_huc8/\";\nexport const FIBI_BY_SITE_URL =\n    \"https://programs.iowadnr.gov/bionet/api/v1/fish/fibi/by_site/\";\nexport const EPA_URL = \"https://www.waterqualitydata.us/data/Station/search?\";\nexport const SAMPLE_RESULTS_URL =\n    \"https://www.waterqualitydata.us/data/Result/search?\";\nexport const ERROR_SHE_GET_WET = \"She get wet\";\nexport const ERROR_ADDRESS_NOT_FOUND = \"Address not found\";\nexport const ERROR_WATERSHED_NOT_FOUND = \"Watershed not found\";\nexport const HUC_FROM_ADDRESS_URL =\n    \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates\";\nexport const WATERSHED_DATA_URL =\n    \"https://inlandwaters.geoplatform.gov/arcgis/rest/services/NHDPlus/WatershedBoundaryDataset/MapServer/10/query\";\nexport const HUC_BORDER_URL =\n    \"https://watersgeo.epa.gov/arcgis/rest/services/NHDPlus_NP21/WBD_NP21_Simplified/MapServer/find?searchText=\";\n","import axios from \"axios\";\nimport { HUC_FROM_ADDRESS_URL, WATERSHED_DATA_URL, ERROR_ADDRESS_NOT_FOUND, ERROR_WATERSHED_NOT_FOUND } from \"./constants/urls\";\n\nasync function getHucFromAddress(address) {\n    var url = HUC_FROM_ADDRESS_URL;\n    return axios\n        .get(url, {\n            params: {\n                outFields: \"Loc_name,City,Place_addr,Region,RegionAbbr,Country\",\n                outSR: { latestWkid: 3857, wkid: 102100 },\n                f: \"json\",\n                SingleLine: address\n            }\n        })\n        .then(response => {\n            if (typeof response.data.candidates[0] === \"undefined\") {\n                return Promise.reject(ERROR_ADDRESS_NOT_FOUND);\n            }\n            var firstCandidate = response.data.candidates[0];\n            return {\n                spatialReference: response.data.spatialReference,\n                x: firstCandidate.location.x,\n                y: firstCandidate.location.y\n            };\n        })\n        .then(location => {\n            return getWatershedData(location);\n        });\n}\n\nasync function getWatershedData(location) {\n    var url = WATERSHED_DATA_URL;\n\n    return axios\n        .get(url, {\n            params: {\n                f: \"json\",\n                outFields: \"HUC12\",\n                spatialRel: \"esriSpatialRelIntersects\",\n                where: \"1=1\",\n                geometryType: \"esriGeometryPoint\",\n                inSR: \"102100\",\n                outSR: \"102100\",\n                geometry: location\n            }\n        })\n        .then(response => {\n            if (typeof response.data.features[0] === \"undefined\") {\n                return Promise.reject(ERROR_WATERSHED_NOT_FOUND);\n            }\n            return response.data.features[0].attributes.HUC12;\n        });\n}\n\nexport default getHucFromAddress;\n","export default class Data {\n    constructor(){\n\tthis.name = \"\";\n\tthis.unit = \"\";\n\tthis.value = 0.0;\n\tthis.date = \"\";\n\tthis.locId = \"\";\n    }\n}","export default class Point {\n    constructor(){\n\tthis.locId = \"\";\n\tthis.name = \"\";\n\tthis.lat = 0.0;\n\tthis.long = 0.0;\n\tthis.datas = [];\n    }\n}","import axios from \"axios\";\nimport {\n    FIBI_URL,\n    FIBI_BY_SITE_URL,\n    EPA_URL,\n    SAMPLE_RESULTS_URL,\n    ERROR_SHE_GET_WET\n} from \"./constants/urls\";\nimport Data from \"./models/data\";\nimport Point from \"./models/point\";\n\n// axios.defaults.timeout = 1000000000;\n\nasync function getEcoliData(huc) {\n    return baseEpaQuery(huc, \"Escherichia%20coli\");\n}\n\nasync function getNitrateData(huc) {\n    return baseEpaQuery(huc, \"Nitrate\");\n}\n\nasync function baseEpaQuery(huc, charName) {\n    let sampleResult = await getSampleResults(huc, charName);\n    console.log(sampleResult);\n    let dataSamples = getValueDataFromXml(sampleResult.data)\n\n    let locationResult = await getEpaStations(huc, charName);\n    let pointSamples = getLocationDataFromXml(locationResult.data)\n\n    for (let key of pointSamples.keys()) {\n        let data = dataSamples.get(key);\n        if (data !== undefined) {\n            pointSamples.get(key).datas.push(data);\n        }\n    }\n\n    return pointSamples;\n}\n\nfunction getValueDataFromXml(xml) {\n    let parsedResult = new DOMParser().parseFromString(xml, \"text/xml\");\n    let activities = parsedResult.getElementsByTagName(\"Activity\");\n    let samples = new Map();\n    for (let activity of activities) {\n\t    let sample = new Data();\n        const getTagValue = (qualifiedName) => {\n            let tag = activity.getElementsByTagName(qualifiedName)[0];\n            return (tag === undefined) ? null :tag.childNodes[0].nodeValue;\n        };\n\n        sample.name = getTagValue(\"CharacteristicName\");\n\t    sample.locId = getTagValue(\"MonitoringLocationIdentifier\");\n        sample.date = getTagValue(\"ActivityStartDate\");\n        sample.value = getTagValue(\"ResultMeasureValue\");\n\t    sample.unit = getTagValue(\"MeasureUnitCode\");\n\n        let existing = samples[sample.locId];\n        if (existing == null || (Date.parse(sample.date) > Date.parse(existing.date))) {\n            samples.set(sample.locId, sample);\n        }\n    }\n\n    return samples;\n}\n\nasync function convertEsriGeometryPolygonToLatLngList(promise) {\n    let esriGeometry = promise.data\n    var dataCordsQueryParam = '';\n    if (esriGeometry != null && esriGeometry.results != null && esriGeometry.results.length > 0\n        && esriGeometry.results[0].geometryType != null && esriGeometry.results[0].geometryType === (\"esriGeometryPolygon\")) {\n        esriGeometry.results[0].geometry.rings[0].forEach((lngLat) => {\n            dataCordsQueryParam += lngLat[0] + ',' + lngLat[1] + ';'\n        });\n    }\n\n    dataCordsQueryParam = dataCordsQueryParam.substring(0, dataCordsQueryParam.length - 1); // remove final semicolon\n\n    let url = `http://epsg.io/trans?data=${dataCordsQueryParam}&s_srs=3857&t_srs=4326`\n    return await axios.get(url).catch(error => {console.log(error)});\n}\n\nfunction getLocationDataFromXml(xml) {\n    let parsedResult = new DOMParser().parseFromString(xml, \"text/xml\");\n    let locations = parsedResult.getElementsByTagName(\"MonitoringLocation\");\n    let samples = new Map();\n    for (let location of locations) {\n\t    let sample = new Point()\n        const getTagValue = (qualifiedName) => {\n            let tag = location.getElementsByTagName(qualifiedName)[0];\n            return (tag === undefined) ? null :tag.childNodes[0].nodeValue;\n        };\n\n        sample.locId = getTagValue(\"MonitoringLocationIdentifier\");\n\t    sample.name = getTagValue(\"MonitoringLocationName\");\n        sample.lat = getTagValue(\"LatitudeMeasure\");\n        sample.long = getTagValue(\"LongitudeMeasure\");\n\n        let existing = samples[sample.locId];\n        if (existing == null || (Date.parse(sample.date) > Date.parse(existing.date))) {\n            samples.set(sample.locId, sample);\n        }\n    }\n\n    return samples;\n}\n\nasync function getFibiData(huc) {\n    var isHuc12 = huc.length === 12;\n    var huc8 = huc.substring(0, 8);\n    var url = FIBI_URL;\n\n    return axios\n        .get(url + huc8)\n        .then(response => {\n            return response.data;\n        })\n        .then(sites => {\n            if (isHuc12) {\n                var filteredSites = sites.filter(site => site.huc12 === huc);\n                return Promise.resolve(filteredSites);\n            }\n            return Promise.resolve(sites);\n        })\n        .then(sites => {\n            return sites.map(site => site.id);\n        })\n        .then(siteIds => {\n            return Promise.all(siteIds.map(fetchFibiDataBySiteId));\n        })\n        .catch(function(error) {\n            // handle error\n            console.log(error);\n            return ERROR_SHE_GET_WET;\n        });\n}\n\nasync function fetchFibiDataBySiteId(siteId) {\n    var url = FIBI_BY_SITE_URL;\n    return axios.get(url + siteId).then(response => {\n        return response.data;\n    }).then(results => {\n        // sort\n        return results.sort((a, b) => {\n            return new Date(b.sampleDate) - new Date(a.sampleDate);\n        });\n    }).then(results => {\n        // most recent\n        return results[0];\n    }).then(result => {\n        var fibiSite = new Point();\n        fibiSite.name = result.site.name + \" - \" + result.site.landmark;\n        fibiSite.lat = result.site.LatDD;\n        fibiSite.long = result.site.LongDD;\n\n        var fibiData = new Data();\n        fibiData.name = \"FIBI\";\n        fibiData.unit = \"rating\";\n        fibiData.value = result.FIBI;\n        fibiData.type = result.FIBIType;\n        fibiData.class = result.FIBIClass;\n        fibiData.date = result.sampleDate;\n\n        fibiSite.datas.push(fibiData);\n        return fibiSite;\n    }).catch(error => {\n        console.log(error);\n    });\n}\n\nasync function getEpaStations(huc, characteristicName) {\n    let query = EPA_URL + `startDateLo=${dateTwoMonthsAgo()}&huc=${huc}&mimeType=xml&characteristicName=${characteristicName}`;\n    return axios\n        .get(query)\n        .then(function(response) {\n            // handle success\n            return response;\n        })\n        .catch(function(error) {\n            // handle error\n            return ERROR_SHE_GET_WET;\n        });\n}\n\nasync function getSampleResults(huc, characteristicName) {\n    var url = SAMPLE_RESULTS_URL + `startDateLo=${dateTwoMonthsAgo()}&huc=${huc}&mimeType=xml&characteristicName=${characteristicName}`;\n    return axios.get(url).then().catch(error => {\n        console.log(error);\n    });\n}\n\nfunction dateTwoMonthsAgo() {\n    let startDateLo = new Date();\n    startDateLo.setMonth(startDateLo.getMonth() - 2);\n    return startDateLo.toLocaleDateString().replace(/\\//g, '-')\n}\n\nasync function getHuc(lat, long) {}\n\nexport default {\n    getEcoliData,\n    getNitrateData,\n    getFibiData,\n    getEpaStations,\n    getSampleResults,\n    getHuc,\n    convertEsriGeometryPolygonToLatLngList\n};\n","import React, { Component } from \"react\";\nimport { GoogleApiWrapper } from 'google-maps-react';\nimport \"./App.css\";\n\nimport PlottedMap from \"./ui-core/components/map\";\nimport Header from \"./ui-core/components/header\";\nimport AddressModal from \"./ui-core/modals/address\";\nimport { HEADER_TITLE } from \"./ui-core/constants/header\";\nimport { DRINKING_LAYER } from \"./constants_shared/layers\";\nimport ActivityTypeRadio from \"./ui-core/components/radio-activity-type\";\nimport getHucBorder from \"./server-core/border-data-api\";\nimport getHucFromAddress from \"./server-core/location-service\";\nimport API from \"./server-core/api-client\";\n\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core/styles\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport queryString from 'query-string'\nimport { async } from \"q\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: blue,\n        secondary: {\n            main: \"#84ffff\"\n        }\n    },\n    typography: {\n        useNextVariants: true\n    }\n});\n\nconst AppRouting = () => (\n    <Router>\n        <Route exact path=\"/\" component={App}/>\n    </Router>\n);\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            coordinatesList: [],\n            dataPointsToPlot: [],\n            ecoliData: [],\n            nitrateData: [],\n            fibiData: [],\n            selectedLayer: DRINKING_LAYER,\n            activity: \"drink\"\n        };\n    }\n\n    defaultDataPointsToPlot(nitrateData) {\n\n    }\n\n    // componentDidMount() {\n    //     console.log(this.props.location);\n    //     const values = queryString.parse(this.props.location.search);\n    //     if ([\"fish\", \"drink\", \"swim\"].includes(values.activity)) {\n    //         this.setState({activity: values.activity});\n    //     }\n    // }\n\n    handleSubmit = async (address) => {\n        let hucId = await getHucFromAddress(address);\n        console.log(\"hucId: \" + hucId);\n\n        let hucBorder = await getHucBorder(hucId, \"huc_12\");\n        console.log(hucBorder);\n\n        let latlngs = (await API.convertEsriGeometryPolygonToLatLngList(hucBorder)).data;\n        let coords = [];\n        for (var latlng of latlngs) {\n            let loc = {};\n            loc.lat = Number(latlng.y);\n            loc.lng = Number(latlng.x);\n            coords.push(loc);\n        }\n\n        console.log('coords', coords);\n\n        this.setState({\n            coordinatesList: coords\n        });\n\n        let nitratePoints = await API.getNitrateData(hucId);\n\n        this.setState({\n            ecoliData: await API.getEcoliData(hucId),\n            nitrateData: nitratePoints,\n            fibiData: await API.getFibiData(hucId)\n        });\n\n        this.setState({\n            dataPointsToPlot: nitratePoints\n        });\n    };\n\n    render() {\n        console.log('render', this.state.coordinatesList);\n\n        return (\n            <MuiThemeProvider theme={theme}>\n                <div className=\"App\">\n                    <Header title={HEADER_TITLE} />\n                    <PlottedMap google={this.props.google} coordinatesList={this.state.coordinatesList} dataPointsToPlot={this.state.dataPointsToPlot}  />\n                    <ActivityTypeRadio handleClose={() => {}}\n                                       show={true}\n                                       value={this.state.activity}\n                    />\n                    <AddressModal\n                        handleClose={() => { }}\n                        show={true}\n                        setCoordinatesList={(coordinatesList) => {\n                            this.setCoordinatesList(coordinatesList)\n                        }}\n                        handleSubmit={this.handleSubmit}\n                        setAddress={this.setAddress}\n                    />\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: ('AIzaSyBbQM-FxetsrzMqbJ2xzZbcbDUb9Au4nh4')\n})(App)\n","export const HEADER_TITLE = \"Find Water Quality Data Near Me\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}