{"version":3,"sources":["ui-core/components/map.js","ui-core/components/header.js","ui-core/modals/address.js","ui-core/constants/address.js","constants_shared/layers.js","server-core/border-data-api.js","server-core/constants/urls.js","server-core/location-service.js","server-core/models/data.js","server-core/models/point.js","server-core/api-client.js","App.js","ui-core/constants/header.js","serviceWorker.js","index.js"],"names":["PlottedMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dataPointsToPlot","coordinatesList","setState","_this2","undefined","forEach","dataPoint","createMarker","point","react_default","a","createElement","dist","position","lat","lng","icon","url","anchor","window","google","maps","Point","scaledSize","Size","zoom","initialCenter","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","createMarkers","Component","Header","title","className","AppBar_default","AddressModal","address","handleChange","bind","assertThisInitialized","handleKeyPress","handleOnClick","target","_ref","value","handleSubmit","event","key","Card_default","CardHeader_default","CardContent_default","TextField_default","type","placeholder","onChange","onKeyPress","CardActions_default","Button_default","size","variant","color","onClick","DRINKING_LAYER","_callee","hucid","hucType","regenerator_default","wrap","_context","prev","next","abrupt","axios","get","then","response","catch","error","console","log","stop","getHucBorder","FIBI_URL","FIBI_BY_SITE_URL","EPA_URL","SAMPLE_RESULTS_URL","ERROR_SHE_GET_WET","ERROR_ADDRESS_NOT_FOUND","ERROR_WATERSHED_NOT_FOUND","HUC_FROM_ADDRESS_URL","WATERSHED_DATA_URL","params","outFields","outSR","latestWkid","wkid","f","SingleLine","data","candidates","Promise","reject","firstCandidate","spatialReference","x","location","y","getWatershedData","_callee2","_context2","spatialRel","where","geometryType","inSR","geometry","features","attributes","HUC12","getHucFromAddress","Data","name","unit","date","locId","long","datas","huc","baseEpaQuery","_callee3","charName","sampleResult","dataSamples","locationResult","pointSamples","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_context3","getSampleResults","sent","getValueDataFromXml","getEpaStations","getLocationDataFromXml","keys","Symbol","iterator","done","push","t0","return","finish","xml","activities","DOMParser","parseFromString","getElementsByTagName","samples","Map","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","activity","sample","getTagValue","qualifiedName","tag","childNodes","nodeValue","existing","Date","parse","set","_iterator","err","_callee4","promise","esriGeometry","dataCordsQueryParam","_context4","results","length","rings","lngLat","substring","concat","locations","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","_iterator2","_callee5","isHuc12","huc8","_context5","sites","filteredSites","filter","site","huc12","resolve","map","id","siteIds","all","fetchFibiDataBySiteId","_callee6","siteId","_context6","sort","b","sampleDate","result","fibiSite","landmark","LatDD","LongDD","fibiData","FIBI","FIBIType","class","FIBIClass","_callee7","characteristicName","query","_context7","dateTwoMonthsAgo","_callee8","_context8","startDateLo","setMonth","getMonth","toLocaleDateString","replace","_callee9","_context9","api_client","getEcoliData","getNitrateData","getFibiData","getHuc","convertEsriGeometryPolygonToLatLngList","theme","createMuiTheme","palette","primary","blue","secondary","main","typography","useNextVariants","App","ecoliData","nitrateData","selectedLayer","setCoordinatesList","hucId","hucBorder","API","latlngs","coords","latlng","loc","Number","setDataPoints","nitratePoints","defaultDataPointsToPlot","styles","components_header","ui_core_modals_address","handleClose","show","setAddress","GoogleApiWrapper","apiKey","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6VA4DeA,sBAxDX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QACKI,MAAQ,CACTC,iBAAkBT,EAAMS,iBACxBC,gBAAiB,IAJNT,kFAQAS,GACfN,KAAKO,SAAS,CACVD,4DAIQ,IAAAE,EAAAR,UACsBS,GAA/BT,KAAKI,MAAMC,kBACVL,KAAKI,MAAMC,iBAAiBK,QAAQ,SAAAC,GAChC,OAAOH,EAAKI,aAAaD,0CAMxBE,GACT,OAAOC,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACHC,SAAU,CAAEC,IAAKN,EAAMM,IAAKC,IAAKP,EAAMO,KACvCC,KAAM,CACFC,IAAK,kBACLC,OAAQ,IAAIC,OAAOC,OAAOC,KAAKC,MAAM,GAAI,IACzCC,WAAY,IAAIJ,OAAOC,OAAOC,KAAKG,KAAK,GAAI,wCAMpD,OACIf,EAAAC,EAAAC,cAACC,EAAA,IAAD,CACIQ,OAAQzB,KAAKJ,MAAM6B,OACnBK,KAAM,GACNC,cAAe,CAAEZ,IAAK,UAAWC,KAAM,YAEvCN,EAAAC,EAAAC,cAACC,EAAA,QAAD,CACIe,MAAOhC,KAAKI,MAAME,gBAClB2B,YAAY,UACZC,cAAe,GACfC,aAAc,EACdC,UAAU,UACVC,YAAa,MAEhBrC,KAAKsC,wBAlDGC,+BCiBVC,UAfA,SAAA5C,GAAS,IACZ6C,EAAU7C,EAAV6C,MACR,OACI3B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,UACX5B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAQG,SAAS,UACbJ,EAAAC,EAAAC,cAAA,aAAQyB,kHCqETG,sBAhEX,SAAAA,EAAYhD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4C,IACf/C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8C,GAAAzC,KAAAH,KAAMJ,KACDQ,MAAQ,CACTyC,QAAS,IAGbhD,EAAKiD,aAAejD,EAAKiD,aAAaC,KAAlBjD,OAAAkD,EAAA,EAAAlD,CAAAD,IACpBA,EAAKoD,eAAiBpD,EAAKoD,eAAeF,KAApBjD,OAAAkD,EAAA,EAAAlD,CAAAD,IACtBA,EAAKqD,cAAgBrD,EAAKqD,cAAcH,KAAnBjD,OAAAkD,EAAA,EAAAlD,CAAAD,IARNA,+EAWM,IAAVsD,EAAUC,EAAVD,OACXnD,KAAKO,SAAS,CACVsC,QAASM,EAAOE,wKAKdrD,KAAKJ,MAAM0D,aAAatD,KAAKI,MAAMyC,0LAGxBU,sEACP,UAAdA,EAAMC,oCACCxD,KAAKJ,MAAM0D,aAAatD,KAAKI,MAAMyC,6IAKtC,OACI/B,EAAAC,EAAAC,cAACyC,EAAA1C,EAAD,CAAM2B,UAAU,SACZ5B,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CAAY2B,UAAU,QAAQD,MC7CX,sBD8CnB3B,EAAAC,EAAAC,cAAC2C,EAAA5C,EAAD,KACID,EAAAC,EAAAC,cAAC4C,EAAA7C,EAAD,CACI2B,UAAU,UACVmB,KAAK,OACLR,MAAOrD,KAAKI,MAAMyC,QAClBiB,YClDuB,wBDmDvBC,SAAU/D,KAAK8C,aAClCkB,WAAYhE,KAAKiD,kBAGNnC,EAAAC,EAAAC,cAACiD,EAAAlD,EAAD,KACID,EAAAC,EAAAC,cAACkD,EAAAnD,EAAD,CACI2B,UAAU,aACVyB,KAAK,SACLC,QAAQ,YACRC,MAAM,UACNC,QAAStE,KAAKkD,eALlB,QADJ,aA1CWX,cEZdgC,EAAiB,uECA9B,SAAAC,EAA4BC,EAAOC,GAAnC,IAAApD,EAAA,OAAAqD,EAAA5D,EAAA6D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEQzD,EAAM,6GACNmD,EAAQ,2CACRC,EAAU,0QAJlBG,EAAAG,OAAA,SAQUC,IAAMC,IAAI5D,GAAK6D,KAAK,SAACC,GACvB,OAAOA,IAENC,MAAM,SAACC,GAEJ,OADAC,QAAQC,IAAIF,GACL,6BAbnB,wBAAAT,EAAAY,SAAAjB,6BAiBekB,oDClBFC,EACT,4DACSC,EACT,gEACSC,EAAU,uDACVC,EACT,sDACSC,EAAoB,cACpBC,EAA0B,oBAC1BC,EAA4B,sBAC5BC,EACT,4FACSC,EACT,2JCXJ,SAAA3B,EAAiC3B,GAAjC,IAAAvB,EAAA,OAAAqD,EAAA5D,EAAA6D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACQzD,EAAM4E,EADdrB,EAAAG,OAAA,SAEWC,IACFC,IAAI5D,EAAK,CACN8E,OAAQ,CACJC,UAAW,qDACXC,MAAO,CAAEC,WAAY,KAAMC,KAAM,QACjCC,EAAG,OACHC,WAAY7D,KAGnBsC,KAAK,SAAAC,GACF,GAA2C,qBAAhCA,EAASuB,KAAKC,WAAW,GAChC,OAAOC,QAAQC,OAAOd,GAE1B,IAAIe,EAAiB3B,EAASuB,KAAKC,WAAW,GAC9C,MAAO,CACHI,iBAAkB5B,EAASuB,KAAKK,iBAChCC,EAAGF,EAAeG,SAASD,EAC3BE,EAAGJ,EAAeG,SAASC,KAGlChC,KAAK,SAAA+B,GACF,OAAOE,EAAiBF,MAvBpC,wBAAArC,EAAAY,SAAAjB,sCA2Be4C,+EAAf,SAAAC,EAAgCH,GAAhC,IAAA5F,EAAA,OAAAqD,EAAA5D,EAAA6D,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,cACQzD,EAAM6E,EADdmB,EAAAtC,OAAA,SAGWC,IACFC,IAAI5D,EAAK,CACN8E,OAAQ,CACJK,EAAG,OACHJ,UAAW,QACXkB,WAAY,2BACZC,MAAO,MACPC,aAAc,oBACdC,KAAM,SACNpB,MAAO,SACPqB,SAAUT,KAGjB/B,KAAK,SAAAC,GACF,MAAyC,qBAA9BA,EAASuB,KAAKiB,SAAS,GACvBf,QAAQC,OAAOb,GAEnBb,EAASuB,KAAKiB,SAAS,GAAGC,WAAWC,SApBxD,wBAAAR,EAAA7B,SAAA4B,6BAwBeU,kDCtDMC,EACjB,SAAAA,IAAclI,OAAAC,EAAA,EAAAD,CAAAE,KAAAgI,GACjBhI,KAAKiI,KAAO,GACZjI,KAAKkI,KAAO,GACZlI,KAAKqD,MAAQ,EACbrD,KAAKmI,KAAO,GACZnI,KAAKoI,MAAQ,ICNOzG,EACjB,SAAAA,IAAc7B,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,GACjB3B,KAAKoI,MAAQ,GACbpI,KAAKiI,KAAO,GACZjI,KAAKmB,IAAM,EACXnB,KAAKqI,KAAO,EACZrI,KAAKsI,MAAQ,iDCOd,SAAA9D,EAA4B+D,GAA5B,OAAA5D,EAAA5D,EAAA6D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACWwD,GAAaD,EAAK,uBAD7B,wBAAA1D,EAAAY,SAAAjB,0EAIA,SAAA6C,EAA8BkB,GAA9B,OAAA5D,EAAA5D,EAAA6D,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,cAAAuC,EAAAtC,OAAA,SACWwD,GAAaD,EAAK,YAD7B,wBAAAjB,EAAA7B,SAAA4B,sCAIemB,qFAAf,SAAAC,EAA4BF,EAAKG,GAAjC,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3F,EAAAmD,EAAA,OAAAhC,EAAA5D,EAAA6D,KAAA,SAAAwE,GAAA,cAAAA,EAAAtE,KAAAsE,EAAArE,MAAA,cAAAqE,EAAArE,KAAA,EAC6BsE,GAAiBd,EAAKG,GADnD,cACQC,EADRS,EAAAE,KAEI/D,QAAQC,IAAImD,GACRC,EAAcW,GAAoBZ,EAAahC,MAHvDyC,EAAArE,KAAA,EAK+ByE,GAAejB,EAAKG,GALnD,OAQI,IAHIG,EALRO,EAAAE,KAMQR,EAAeW,GAAuBZ,EAAelC,MAN7DoC,GAAA,EAAAC,GAAA,EAAAC,OAAAxI,EAAA2I,EAAAtE,KAAA,GAQIoE,EAAgBJ,EAAaY,OAA7BC,OAAAC,cAAAb,GAAAI,EAAAD,EAAAnE,QAAA8E,MAAAd,GAAA,EAASvF,EAA4B2F,EAAA9F,WAEpB5C,KADTkG,EAAOiC,EAAY1D,IAAI1B,KAEvBsF,EAAa5D,IAAI1B,GAAK8E,MAAMwB,KAAKnD,GAX7CyC,EAAArE,KAAA,iBAAAqE,EAAAtE,KAAA,GAAAsE,EAAAW,GAAAX,EAAA,UAAAJ,GAAA,EAAAC,EAAAG,EAAAW,GAAA,QAAAX,EAAAtE,KAAA,GAAAsE,EAAAtE,KAAA,GAAAiE,GAAA,MAAAG,EAAAc,QAAAd,EAAAc,SAAA,WAAAZ,EAAAtE,KAAA,IAAAkE,EAAA,CAAAI,EAAArE,KAAA,eAAAkE,EAAA,eAAAG,EAAAa,OAAA,mBAAAb,EAAAa,OAAA,mBAAAb,EAAApE,OAAA,SAeW8D,GAfX,yBAAAM,EAAA3D,SAAAgD,EAAA,4DAkBA,SAASc,GAAoBW,GACzB,IACIC,GADe,IAAIC,WAAYC,gBAAgBH,EAAK,YAC1BI,qBAAqB,YAC/CC,EAAU,IAAIC,IAHYC,GAAA,EAAAC,GAAA,EAAAC,OAAAlK,EAAA,IAI9B,IAJ8B,IAI9BmK,EAJ8BC,EAAA,eAIrBC,EAJqBF,EAAAvH,MAKzB0H,EAAS,IAAI/C,EACRgD,EAAc,SAACC,GACjB,IAAIC,EAAMJ,EAASR,qBAAqBW,GAAe,GACvD,YAAgBxK,IAARyK,EAAqB,KAAMA,EAAIC,WAAW,GAAGC,WAGzDL,EAAO9C,KAAO+C,EAAY,sBAC7BD,EAAO3C,MAAQ4C,EAAY,gCACxBD,EAAO5C,KAAO6C,EAAY,qBAC1BD,EAAO1H,MAAQ2H,EAAY,sBAC9BD,EAAO7C,KAAO8C,EAAY,mBAEvB,IAAIK,EAAWd,EAAQQ,EAAO3C,QACd,MAAZiD,GAAqBC,KAAKC,MAAMR,EAAO5C,MAAQmD,KAAKC,MAAMF,EAASlD,QACnEoC,EAAQiB,IAAIT,EAAO3C,MAAO2C,IAflCU,EAAqBtB,EAArBR,OAAAC,cAAAa,GAAAG,EAAAa,EAAA1G,QAAA8E,MAAAY,GAAA,EAAiCI,IAJH,MAAAa,GAAAhB,GAAA,EAAAC,EAAAe,EAAA,YAAAjB,GAAA,MAAAgB,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAU,EAAA,MAAAC,GAuB9B,OAAOJ,+CAGX,SAAAoB,EAAsDC,GAAtD,IAAAC,EAAAC,EAAAxK,EAAA,OAAAqD,EAAA5D,EAAA6D,KAAA,SAAAmH,GAAA,cAAAA,EAAAjH,KAAAiH,EAAAhH,MAAA,cACQ8G,EAAeD,EAAQjF,KACvBmF,EAAsB,GACN,MAAhBD,GAAgD,MAAxBA,EAAaG,SAAmBH,EAAaG,QAAQC,OAAS,GAC3C,MAAxCJ,EAAaG,QAAQ,GAAGvE,cAAkE,wBAA1CoE,EAAaG,QAAQ,GAAGvE,cAC3EoE,EAAaG,QAAQ,GAAGrE,SAASuE,MAAM,GAAGxL,QAAQ,SAACyL,GAC/CL,GAAuBK,EAAO,GAAK,IAAMA,EAAO,GAAK,MAI7DL,EAAsBA,EAAoBM,UAAU,EAAGN,EAAoBG,OAAS,GAEhF3K,EAZR,6BAAA+K,OAY2CP,EAZ3C,0BAAAC,EAAAhH,KAAA,EAaiBE,IAAMC,IAAI5D,GAAK+D,MAAM,SAAAC,GAAUC,QAAQC,IAAIF,KAb5D,cAAAyG,EAAA/G,OAAA,SAAA+G,EAAAzC,MAAA,wBAAAyC,EAAAtG,SAAAkG,6BAgBA,SAASlC,GAAuBS,GAC5B,IACIoC,GADe,IAAIlC,WAAYC,gBAAgBH,EAAK,YAC3BI,qBAAqB,sBAC9CC,EAAU,IAAIC,IAHe+B,GAAA,EAAAC,GAAA,EAAAC,OAAAhM,EAAA,IAIjC,IAJiC,IAIjCiM,EAJiCC,EAAA,eAIxBzF,EAJwBwF,EAAArJ,MAK5B0H,EAAS,IAAIpJ,EACRqJ,EAAc,SAACC,GACjB,IAAIC,EAAMhE,EAASoD,qBAAqBW,GAAe,GACvD,YAAgBxK,IAARyK,EAAqB,KAAMA,EAAIC,WAAW,GAAGC,WAGzDL,EAAO3C,MAAQ4C,EAAY,gCAC9BD,EAAO9C,KAAO+C,EAAY,0BACvBD,EAAO5J,IAAM6J,EAAY,mBACzBD,EAAO1C,KAAO2C,EAAY,oBAE1B,IAAIK,EAAWd,EAAQQ,EAAO3C,QACd,MAAZiD,GAAqBC,KAAKC,MAAMR,EAAO5C,MAAQmD,KAAKC,MAAMF,EAASlD,QACnEoC,EAAQiB,IAAIT,EAAO3C,MAAO2C,IAdlC6B,EAAqBN,EAArB3C,OAAAC,cAAA2C,GAAAG,EAAAE,EAAA7H,QAAA8E,MAAA0C,GAAA,EAAgCI,IAJC,MAAAjB,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAK,EAAA5C,QAAA4C,EAAA5C,SAAA,WAAAwC,EAAA,MAAAC,GAsBjC,OAAOlC,+CAGX,SAAAsC,EAA2BtE,GAA3B,IAAAuE,EAAAC,EAAAzL,EAAA,OAAAqD,EAAA5D,EAAA6D,KAAA,SAAAoI,GAAA,cAAAA,EAAAlI,KAAAkI,EAAAjI,MAAA,cACQ+H,EAAyB,KAAfvE,EAAI0D,OACdc,EAAOxE,EAAI6D,UAAU,EAAG,GACxB9K,EAAMqE,EAHdqH,EAAAhI,OAAA,SAKWC,IACFC,IAAI5D,EAAMyL,GACV5H,KAAK,SAAAC,GACF,OAAOA,EAASuB,OAEnBxB,KAAK,SAAA8H,GACF,GAAIH,EAAS,CACT,IAAII,EAAgBD,EAAME,OAAO,SAAAC,GAAI,OAAIA,EAAKC,QAAU9E,IACxD,OAAO1B,QAAQyG,QAAQJ,GAE3B,OAAOrG,QAAQyG,QAAQL,KAE1B9H,KAAK,SAAA8H,GACF,OAAOA,EAAMM,IAAI,SAAAH,GAAI,OAAIA,EAAKI,OAEjCrI,KAAK,SAAAsI,GACF,OAAO5G,QAAQ6G,IAAID,EAAQF,IAAII,OAElCtI,MAAM,SAASC,GAGZ,OADAC,QAAQC,IAAIF,GACLS,KA1BnB,wBAAAiH,EAAAvH,SAAAoH,sCA8Bec,mFAAf,SAAAC,EAAqCC,GAArC,IAAAvM,EAAA,OAAAqD,EAAA5D,EAAA6D,KAAA,SAAAkJ,GAAA,cAAAA,EAAAhJ,KAAAgJ,EAAA/I,MAAA,cACQzD,EAAMsE,EADdkI,EAAA9I,OAAA,SAEWC,IAAMC,IAAI5D,EAAMuM,GAAQ1I,KAAK,SAAAC,GAChC,OAAOA,EAASuB,OACjBxB,KAAK,SAAA6G,GAEJ,OAAOA,EAAQ+B,KAAK,SAAChN,EAAGiN,GACpB,OAAO,IAAI1C,KAAK0C,EAAEC,YAAc,IAAI3C,KAAKvK,EAAEkN,gBAEhD9I,KAAK,SAAA6G,GAEJ,OAAOA,EAAQ,KAChB7G,KAAK,SAAA+I,GACJ,IAAIC,EAAW,IAAIxM,EACnBwM,EAASlG,KAAOiG,EAAOd,KAAKnF,KAAO,MAAQiG,EAAOd,KAAKgB,SACvDD,EAAShN,IAAM+M,EAAOd,KAAKiB,MAC3BF,EAAS9F,KAAO6F,EAAOd,KAAKkB,OAE5B,IAAIC,EAAW,IAAIvG,EASnB,OARAuG,EAAStG,KAAO,OAChBsG,EAASrG,KAAO,SAChBqG,EAASlL,MAAQ6K,EAAOM,KACxBD,EAAS1K,KAAOqK,EAAOO,SACvBF,EAASG,MAAQR,EAAOS,UACxBJ,EAASpG,KAAO+F,EAAOD,WAEvBE,EAAS7F,MAAMwB,KAAKyE,GACbJ,IACR9I,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MA7BpB,wBAAAwI,EAAArI,SAAAmI,sCAiCepE,qFAAf,SAAAoF,EAA8BrG,EAAKsG,GAAnC,IAAAC,EAAA,OAAAnK,EAAA5D,EAAA6D,KAAA,SAAAmK,GAAA,cAAAA,EAAAjK,KAAAiK,EAAAhK,MAAA,cACQ+J,EAAQjJ,EAAO,eAAAwG,OAAkB2C,KAAlB,SAAA3C,OAA4C9D,EAA5C,qCAAA8D,OAAmFwC,GAD1GE,EAAA/J,OAAA,SAEWC,IACFC,IAAI4J,GACJ3J,KAAK,SAASC,GAEX,OAAOA,IAEVC,MAAM,SAASC,GAEZ,OAAOS,KAVnB,wBAAAgJ,EAAAtJ,SAAAmJ,sCAcevF,qFAAf,SAAA4F,EAAgC1G,EAAKsG,GAArC,IAAAvN,EAAA,OAAAqD,EAAA5D,EAAA6D,KAAA,SAAAsK,GAAA,cAAAA,EAAApK,KAAAoK,EAAAnK,MAAA,cACQzD,EAAMwE,EAAkB,eAAAuG,OAAkB2C,KAAlB,SAAA3C,OAA4C9D,EAA5C,qCAAA8D,OAAmFwC,GADnHK,EAAAlK,OAAA,SAEWC,IAAMC,IAAI5D,GAAK6D,OAAOE,MAAM,SAAAC,GAC/BC,QAAQC,IAAIF,MAHpB,wBAAA4J,EAAAzJ,SAAAwJ,6BAOA,SAASD,KACL,IAAIG,EAAc,IAAI7D,KAEtB,OADA6D,EAAYC,SAASD,EAAYE,WAAa,GACvCF,EAAYG,qBAAqBC,QAAQ,MAAO,kDAG3D,SAAAC,EAAsBrO,EAAKkH,GAA3B,OAAA1D,EAAA5D,EAAA6D,KAAA,SAAA6K,GAAA,cAAAA,EAAA3K,KAAA2K,EAAA1K,MAAA,wBAAA0K,EAAAhK,SAAA+J,6BAEe,IAAAE,GAAA,CACXC,0DACAC,4DACAC,yDACArG,kBACAH,oBACAyG,sDACAC,mHC3LEC,WAAQC,0BAAe,CACzBC,QAAS,CACLC,QAASC,KACTC,UAAW,CACPC,KAAM,YAGdC,WAAY,CACRC,iBAAiB,MAInBC,eACF,SAAAA,IAAc,IAAA5Q,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyQ,IACV5Q,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2Q,GAAAtQ,KAAAH,QACKI,MAAQ,CACTE,gBAAiB,GACjBD,iBAAkB,GAClBqQ,UAAW,GACXC,YAAa,GACbpC,SAAU,GACVqC,cAAerM,GAGnB1E,EAAKyD,aAAezD,EAAKyD,aAAaP,KAAlBjD,OAAAkD,EAAA,EAAAlD,CAAAD,IACpBA,EAAKgR,mBAAqBhR,EAAKgR,mBAAmB9N,KAAxBjD,OAAAkD,EAAA,EAAAlD,CAAAD,IAZhBA,oHAeKgD,6GACGkF,EAAkBlF,iBAAhCiO,SACJvL,QAAQC,IAAI,UAAYsL,YAEFpL,EAAaoL,EAAO,wBAAtCC,SACJxL,QAAQC,IAAIuL,aAESC,GAAIjB,uCAAuCgB,WAEhE,IAFIE,SAAwEtK,KACxEuK,EAAS,gCACbzF,EAAmBwF,EAAnBtH,OAAAC,cAAAa,GAAAG,EAAAa,EAAA1G,QAAA8E,MAAAY,GAAA,EAAS0G,EAAmBvG,EAAAvH,OACpB+N,EAAM,IACNjQ,IAAMkQ,OAAOF,EAAOhK,GACxBiK,EAAIhQ,IAAMiQ,OAAOF,EAAOlK,GACxBiK,EAAOpH,KAAKsH,8PAGVpR,KAAKsR,cAAcR,oCAElB9Q,KAAK6Q,mBAAmBK,+KAGhB5Q,GACfN,KAAKO,SAAS,CACVD,kGAIYwQ,yFACUE,GAAIpB,eAAekB,iBAAzCS,cACJvR,cACqBgR,GAAIrB,aAAamB,kCACrBS,YACGP,GAAInB,YAAYiB,6BAFhCJ,eACAC,iBACApC,oBAHChO,yBAKLP,KAAKwR,wBAAwBD,uJAGTZ,GACpB3Q,KAAKO,SAAS,CACVF,iBAAkBsQ,qCAIjB,IAAAnQ,EAAAR,KAKL,OACIc,EAAAC,EAAAC,cAACyQ,GAAA,iBAAD,CAAkBzB,MAAOA,IACrBlP,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,OACX5B,EAAAC,EAAAC,cAAC0Q,EAAD,CAAQjP,MCjGA,oCDkGR3B,EAAAC,EAAAC,cAACuM,EAAgBvN,KAAKJ,OACtBkB,EAAAC,EAAAC,cAAC2Q,EAAD,CACIC,YAAa,aACbC,MAAM,EACNhB,mBAAoB,SAACvQ,GACjBE,EAAKqQ,mBAAmBvQ,IAE5BgD,aAActD,KAAKsD,aACnBwO,WAAY9R,KAAK8R,sBA5EvBvP,aAoFHwP,8BAAiB,CAC5BC,OAAS,2CADED,CAEZtB,IExGiBwB,QACW,cAA7BzQ,OAAO0F,SAASgL,UAEe,UAA7B1Q,OAAO0F,SAASgL,UAEhB1Q,OAAO0F,SAASgL,SAASC,MACvB,kECXNC,IAASC,OAAOvR,EAAAC,EAAAC,cAACsR,GAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxN,KAAK,SAAAyN,GACjCA,EAAaC","file":"static/js/main.de99720c.chunk.js","sourcesContent":["import React, {Component} from \"react\"\r\nimport { Map, Marker, GoogleApiWrapper, Polygon } from 'google-maps-react';\r\n\r\nclass PlottedMap extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            dataPointsToPlot: props.dataPointsToPlot,\r\n            coordinatesList: []\r\n        };\r\n    }\r\n\r\n    setCoordinatesList(coordinatesList) {\r\n        this.setState({\r\n            coordinatesList\r\n        });\r\n    }\r\n\r\n    createMarkers() {\r\n        if(this.state.dataPointsToPlot != undefined){\r\n            this.state.dataPointsToPlot.forEach(dataPoint => {\r\n                return this.createMarker(dataPoint);\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    createMarker(point) {\r\n        return <Marker\r\n            position={{ lat: point.lat, lng: point.lng }}\r\n            icon={{\r\n                url: \"/images/low.png\",\r\n                anchor: new window.google.maps.Point(24, 24),\r\n                scaledSize: new window.google.maps.Size(48, 48)\r\n            }}\r\n        />\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Map\r\n                google={this.props.google}\r\n                zoom={17}\r\n                initialCenter={{ lat: 41.583586, lng: -93.628419 }}>\r\n\r\n                <Polygon\r\n                    paths={this.state.coordinatesList}\r\n                    strokeColor=\"#0000FF\"\r\n                    strokeOpacity={0.8}\r\n                    strokeWeight={2}\r\n                    fillColor=\"#0000FF\"\r\n                    fillOpacity={0.35} />\r\n\r\n                {this.createMarkers()}\r\n\r\n            </Map>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlottedMap;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport \"./header.css\";\r\n\r\nconst Header = props => {\r\n    const { title } = props;\r\n    return (\r\n        <div className=\"header\">\r\n            <AppBar position=\"static\">\r\n                <label>{title}</label>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n    ADDRESS_MODAL_TITLE,\r\n    ADDRESS_MODAL_INPUT_PLACEHOLDER\r\n} from \"../constants/address\";\r\nimport \"./address.css\";\r\n\r\nclass AddressModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            address: \"\"\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.handleOnClick = this.handleOnClick.bind(this);\r\n    }\r\n\r\n    handleChange({ target }) {\r\n        this.setState({\r\n            address: target.value\r\n        });\r\n    }\r\n\r\n    async handleOnClick(){\r\n        await this.props.handleSubmit(this.state.address);\r\n    }\r\n\r\n    async handleKeyPress(event) {\r\n\tif(event.key === 'Enter'){\r\n\t    await this.props.handleSubmit(this.state.address);\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Card className=\"modal\">\r\n                <CardHeader className=\"title\" title={ADDRESS_MODAL_TITLE} />\r\n                <CardContent>\r\n                    <TextField\r\n                        className=\"address\"\r\n                        type=\"text\"\r\n                        value={this.state.address}\r\n                        placeholder={ADDRESS_MODAL_INPUT_PLACEHOLDER}\r\n                        onChange={this.handleChange}\r\n\t    onKeyPress={this.handleKeyPress}\r\n                />\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button\r\n                        className=\"nextButton\"\r\n                        size=\"medium\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={this.handleOnClick}\r\n                    >\r\n                        NEXT\r\n            </Button>;\r\n                </CardActions>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nAddressModal.propTypes = {\r\n    handleClose: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default AddressModal;\r\n","export const ADDRESS_MODAL_TITLE = 'TYPE YOUR ADDRESS';\r\nexport const ADDRESS_MODAL_INPUT_PLACEHOLDER = 'Enter Address Here...';","export const FISH_LAYER = \"fish\";\r\nexport const SWIMMING_LAYER = \"swimming\";\r\nexport const DRINKING_LAYER = \"drinking\";","import axios from 'axios';\r\n\r\nasync function getHucBorder(hucid, hucType) {\r\n\r\n    let url = \"https://watersgeo.epa.gov/arcgis/rest/services/NHDPlus_NP21/WBD_NP21_Simplified/MapServer/find?searchText=\" +\r\n        hucid + \"&contains=true&searchFields=&sr=&layers=\" +\r\n        hucType + \"&layerDefs=&returnGeometry=true&maxAllowableOffset=&geometryPrecision=&dynamicLayers=&returnZ\" +\r\n        \"=false&returnM=false&gdbVersion=&returnUnformattedValues=false&returnFieldName=false&datumTransformations\" +\r\n        \"=&layerParameterValues=&mapRangeValues=&layerRangeValues=&f=pjson\";\r\n\r\n   return axios.get(url).then((response) => {\r\n        return response;\r\n    })\r\n        .catch((error) => {\r\n            console.log(error);\r\n            return \"will the water kill me?\";\r\n        });\r\n}\r\n\r\nexport default getHucBorder;\r\n","export const ECOLI_URL = \"https://www.waterqualitydata.us/data/Result/search?\";\r\nexport const FIBI_URL =\r\n    \"https://programs.iowadnr.gov/bionet/api/v1/sites/by_huc8/\";\r\nexport const FIBI_BY_SITE_URL =\r\n    \"https://programs.iowadnr.gov/bionet/api/v1/fish/fibi/by_site/\";\r\nexport const EPA_URL = \"https://www.waterqualitydata.us/data/Station/search?\";\r\nexport const SAMPLE_RESULTS_URL =\r\n    \"https://www.waterqualitydata.us/data/Result/search?\";\r\nexport const ERROR_SHE_GET_WET = \"She get wet\";\r\nexport const ERROR_ADDRESS_NOT_FOUND = \"Address not found\";\r\nexport const ERROR_WATERSHED_NOT_FOUND = \"Watershed not found\";\r\nexport const HUC_FROM_ADDRESS_URL =\r\n    \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates\";\r\nexport const WATERSHED_DATA_URL =\r\n    \"https://inlandwaters.geoplatform.gov/arcgis/rest/services/NHDPlus/WatershedBoundaryDataset/MapServer/10/query\";\r\nexport const HUC_BORDER_URL =\r\n    \"https://watersgeo.epa.gov/arcgis/rest/services/NHDPlus_NP21/WBD_NP21_Simplified/MapServer/find?searchText=\";\r\n","import axios from \"axios\";\r\nimport { HUC_FROM_ADDRESS_URL, WATERSHED_DATA_URL, ERROR_ADDRESS_NOT_FOUND, ERROR_WATERSHED_NOT_FOUND } from \"./constants/urls\";\r\n\r\nasync function getHucFromAddress(address) {\r\n    var url = HUC_FROM_ADDRESS_URL;\r\n    return axios\r\n        .get(url, {\r\n            params: {\r\n                outFields: \"Loc_name,City,Place_addr,Region,RegionAbbr,Country\",\r\n                outSR: { latestWkid: 3857, wkid: 102100 },\r\n                f: \"json\",\r\n                SingleLine: address\r\n            }\r\n        })\r\n        .then(response => {\r\n            if (typeof response.data.candidates[0] === \"undefined\") {\r\n                return Promise.reject(ERROR_ADDRESS_NOT_FOUND);\r\n            }\r\n            var firstCandidate = response.data.candidates[0];\r\n            return {\r\n                spatialReference: response.data.spatialReference,\r\n                x: firstCandidate.location.x,\r\n                y: firstCandidate.location.y\r\n            };\r\n        })\r\n        .then(location => {\r\n            return getWatershedData(location);\r\n        });\r\n}\r\n\r\nasync function getWatershedData(location) {\r\n    var url = WATERSHED_DATA_URL;\r\n\r\n    return axios\r\n        .get(url, {\r\n            params: {\r\n                f: \"json\",\r\n                outFields: \"HUC12\",\r\n                spatialRel: \"esriSpatialRelIntersects\",\r\n                where: \"1=1\",\r\n                geometryType: \"esriGeometryPoint\",\r\n                inSR: \"102100\",\r\n                outSR: \"102100\",\r\n                geometry: location\r\n            }\r\n        })\r\n        .then(response => {\r\n            if (typeof response.data.features[0] === \"undefined\") {\r\n                return Promise.reject(ERROR_WATERSHED_NOT_FOUND);\r\n            }\r\n            return response.data.features[0].attributes.HUC12;\r\n        });\r\n}\r\n\r\nexport default getHucFromAddress;\r\n","export default class Data {\r\n    constructor(){\r\n\tthis.name = \"\";\r\n\tthis.unit = \"\";\r\n\tthis.value = 0.0;\r\n\tthis.date = \"\";\r\n\tthis.locId = \"\";\r\n    }\r\n}","export default class Point {\r\n    constructor(){\r\n\tthis.locId = \"\";\r\n\tthis.name = \"\";\r\n\tthis.lat = 0.0;\r\n\tthis.long = 0.0;\r\n\tthis.datas = [];\r\n    }\r\n}","import axios from \"axios\";\r\nimport {\r\n    FIBI_URL,\r\n    FIBI_BY_SITE_URL,\r\n    EPA_URL,\r\n    SAMPLE_RESULTS_URL,\r\n    ERROR_SHE_GET_WET\r\n} from \"./constants/urls\";\r\nimport Data from \"./models/data\";\r\nimport Point from \"./models/point\";\r\n\r\n// axios.defaults.timeout = 1000000000;\r\n\r\nasync function getEcoliData(huc) {\r\n    return baseEpaQuery(huc, \"Escherichia%20coli\");\r\n}\r\n\r\nasync function getNitrateData(huc) {\r\n    return baseEpaQuery(huc, \"Nitrate\");\r\n}\r\n\r\nasync function baseEpaQuery(huc, charName) {\r\n    let sampleResult = await getSampleResults(huc, charName);\r\n    console.log(sampleResult);\r\n    let dataSamples = getValueDataFromXml(sampleResult.data)\r\n\r\n    let locationResult = await getEpaStations(huc, charName);\r\n    let pointSamples = getLocationDataFromXml(locationResult.data)\r\n\r\n    for (let key of pointSamples.keys()) {\r\n        let data = dataSamples.get(key);\r\n        if (data !== undefined) {\r\n            pointSamples.get(key).datas.push(data);\r\n        }\r\n    }\r\n\r\n    return pointSamples;\r\n}\r\n\r\nfunction getValueDataFromXml(xml) {\r\n    let parsedResult = new DOMParser().parseFromString(xml, \"text/xml\");\r\n    let activities = parsedResult.getElementsByTagName(\"Activity\");\r\n    let samples = new Map();\r\n    for (let activity of activities) {\r\n\t    let sample = new Data();\r\n        const getTagValue = (qualifiedName) => {\r\n            let tag = activity.getElementsByTagName(qualifiedName)[0];\r\n            return (tag === undefined) ? null :tag.childNodes[0].nodeValue;\r\n        };\r\n\r\n        sample.name = getTagValue(\"CharacteristicName\");\r\n\t    sample.locId = getTagValue(\"MonitoringLocationIdentifier\");\r\n        sample.date = getTagValue(\"ActivityStartDate\");\r\n        sample.value = getTagValue(\"ResultMeasureValue\");\r\n\t    sample.unit = getTagValue(\"MeasureUnitCode\");\r\n\r\n        let existing = samples[sample.locId];\r\n        if (existing == null || (Date.parse(sample.date) > Date.parse(existing.date))) {\r\n            samples.set(sample.locId, sample);\r\n        }\r\n    }\r\n\r\n    return samples;\r\n}\r\n\r\nasync function convertEsriGeometryPolygonToLatLngList(promise) {\r\n    let esriGeometry = promise.data\r\n    var dataCordsQueryParam = '';\r\n    if (esriGeometry != null && esriGeometry.results != null && esriGeometry.results.length > 0\r\n        && esriGeometry.results[0].geometryType != null && esriGeometry.results[0].geometryType === (\"esriGeometryPolygon\")) {\r\n        esriGeometry.results[0].geometry.rings[0].forEach((lngLat) => {\r\n            dataCordsQueryParam += lngLat[0] + ',' + lngLat[1] + ';'\r\n        });\r\n    }\r\n\r\n    dataCordsQueryParam = dataCordsQueryParam.substring(0, dataCordsQueryParam.length - 1); // remove final semicolon\r\n\r\n    let url = `http://epsg.io/trans?data=${dataCordsQueryParam}&s_srs=3857&t_srs=4326`\r\n    return await axios.get(url).catch(error => {console.log(error)});\r\n}\r\n\r\nfunction getLocationDataFromXml(xml) {\r\n    let parsedResult = new DOMParser().parseFromString(xml, \"text/xml\");\r\n    let locations = parsedResult.getElementsByTagName(\"MonitoringLocation\");\r\n    let samples = new Map();\r\n    for (let location of locations) {\r\n\t    let sample = new Point()\r\n        const getTagValue = (qualifiedName) => {\r\n            let tag = location.getElementsByTagName(qualifiedName)[0];\r\n            return (tag === undefined) ? null :tag.childNodes[0].nodeValue;\r\n        };\r\n\r\n        sample.locId = getTagValue(\"MonitoringLocationIdentifier\");\r\n\t    sample.name = getTagValue(\"MonitoringLocationName\");\r\n        sample.lat = getTagValue(\"LatitudeMeasure\");\r\n        sample.long = getTagValue(\"LongitudeMeasure\");\r\n\r\n        let existing = samples[sample.locId];\r\n        if (existing == null || (Date.parse(sample.date) > Date.parse(existing.date))) {\r\n            samples.set(sample.locId, sample);\r\n        }\r\n    }\r\n\r\n    return samples;\r\n}\r\n\r\nasync function getFibiData(huc) {\r\n    var isHuc12 = huc.length === 12;\r\n    var huc8 = huc.substring(0, 8);\r\n    var url = FIBI_URL;\r\n\r\n    return axios\r\n        .get(url + huc8)\r\n        .then(response => {\r\n            return response.data;\r\n        })\r\n        .then(sites => {\r\n            if (isHuc12) {\r\n                var filteredSites = sites.filter(site => site.huc12 === huc);\r\n                return Promise.resolve(filteredSites);\r\n            }\r\n            return Promise.resolve(sites);\r\n        })\r\n        .then(sites => {\r\n            return sites.map(site => site.id);\r\n        })\r\n        .then(siteIds => {\r\n            return Promise.all(siteIds.map(fetchFibiDataBySiteId));\r\n        })\r\n        .catch(function(error) {\r\n            // handle error\r\n            console.log(error);\r\n            return ERROR_SHE_GET_WET;\r\n        });\r\n}\r\n\r\nasync function fetchFibiDataBySiteId(siteId) {\r\n    var url = FIBI_BY_SITE_URL;\r\n    return axios.get(url + siteId).then(response => {\r\n        return response.data;\r\n    }).then(results => {\r\n        // sort\r\n        return results.sort((a, b) => {\r\n            return new Date(b.sampleDate) - new Date(a.sampleDate);\r\n        });\r\n    }).then(results => {\r\n        // most recent\r\n        return results[0];\r\n    }).then(result => {\r\n        var fibiSite = new Point();\r\n        fibiSite.name = result.site.name + \" - \" + result.site.landmark;\r\n        fibiSite.lat = result.site.LatDD;\r\n        fibiSite.long = result.site.LongDD;\r\n\r\n        var fibiData = new Data();\r\n        fibiData.name = \"FIBI\";\r\n        fibiData.unit = \"rating\";\r\n        fibiData.value = result.FIBI;\r\n        fibiData.type = result.FIBIType;\r\n        fibiData.class = result.FIBIClass;\r\n        fibiData.date = result.sampleDate;\r\n\r\n        fibiSite.datas.push(fibiData);\r\n        return fibiSite;\r\n    }).catch(error => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nasync function getEpaStations(huc, characteristicName) {\r\n    let query = EPA_URL + `startDateLo=${dateTwoMonthsAgo()}&huc=${huc}&mimeType=xml&characteristicName=${characteristicName}`;\r\n    return axios\r\n        .get(query)\r\n        .then(function(response) {\r\n            // handle success\r\n            return response;\r\n        })\r\n        .catch(function(error) {\r\n            // handle error\r\n            return ERROR_SHE_GET_WET;\r\n        });\r\n}\r\n\r\nasync function getSampleResults(huc, characteristicName) {\r\n    var url = SAMPLE_RESULTS_URL + `startDateLo=${dateTwoMonthsAgo()}&huc=${huc}&mimeType=xml&characteristicName=${characteristicName}`;\r\n    return axios.get(url).then().catch(error => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nfunction dateTwoMonthsAgo() {\r\n    let startDateLo = new Date();\r\n    startDateLo.setMonth(startDateLo.getMonth() - 2);\r\n    return startDateLo.toLocaleDateString().replace(/\\//g, '-')\r\n}\r\n\r\nasync function getHuc(lat, long) {}\r\n\r\nexport default {\r\n    getEcoliData,\r\n    getNitrateData,\r\n    getFibiData,\r\n    getEpaStations,\r\n    getSampleResults,\r\n    getHuc,\r\n    convertEsriGeometryPolygonToLatLngList\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { GoogleApiWrapper } from 'google-maps-react';\r\nimport \"./App.css\";\r\n\r\nimport PlottedMap from \"./ui-core/components/map\";\r\nimport Header from \"./ui-core/components/header\";\r\nimport AddressModal from \"./ui-core/modals/address\";\r\nimport { HEADER_TITLE } from \"./ui-core/constants/header\";\r\nimport { DRINKING_LAYER } from \"./constants_shared/layers\";\r\nimport getHucBorder from \"./server-core/border-data-api\";\r\nimport getHucFromAddress from \"./server-core/location-service\";\r\nimport API from \"./server-core/api-client\";\r\n\r\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport { async } from \"q\";\r\n\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: blue,\r\n        secondary: {\r\n            main: \"#84ffff\"\r\n        }\r\n    },\r\n    typography: {\r\n        useNextVariants: true\r\n    }\r\n});\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            coordinatesList: [],\r\n            dataPointsToPlot: [],\r\n            ecoliData: [],\r\n            nitrateData: [],\r\n            fibiData: [],\r\n            selectedLayer: DRINKING_LAYER,\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.setCoordinatesList = this.setCoordinatesList.bind(this);\r\n    }\r\n\r\n    async handleSubmit(address) {\r\n        let hucId = await getHucFromAddress(address);\r\n        console.log(\"hucId: \" + hucId);\r\n\r\n        let hucBorder = await getHucBorder(hucId, \"huc_12\");\r\n        console.log(hucBorder);\r\n\r\n        let latlngs = (await API.convertEsriGeometryPolygonToLatLngList(hucBorder)).data;\r\n        let coords = [];\r\n        for (var latlng of latlngs) {\r\n            let loc = {};\r\n            loc.lat = Number(latlng.y);\r\n            loc.lng = Number(latlng.x);\r\n            coords.push(loc);\r\n        }\r\n\r\n        await this.setDataPoints(hucId);\r\n\r\n        return this.setCoordinatesList(coords);\r\n    }\r\n\r\n    setCoordinatesList(coordinatesList) {\r\n        this.setState({\r\n            coordinatesList\r\n        });\r\n    }\r\n\r\n    async setDataPoints(hucId) {\r\n        let nitratePoints = await API.getNitrateData(hucId)\r\n        this.setState({\r\n            ecoliData: await API.getEcoliData(hucId),\r\n            nitrateData: nitratePoints,\r\n            fibiData: await API.getFibiData(hucId)\r\n        });\r\n        this.defaultDataPointsToPlot(nitratePoints);\r\n    }\r\n\r\n    defaultDataPointsToPlot(nitrateData) {\r\n        this.setState({\r\n            dataPointsToPlot: nitrateData\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const style = {\r\n            width: '100%',\r\n            height: '100%'\r\n        };\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n                <div className=\"App\">\r\n                    <Header title={HEADER_TITLE} />\r\n                    <PlottedMap {... this.props} />\r\n                    <AddressModal\r\n                        handleClose={() => { }}\r\n                        show={true}\r\n                        setCoordinatesList={(coordinatesList) => {\r\n                            this.setCoordinatesList(coordinatesList)\r\n                        }}\r\n                        handleSubmit={this.handleSubmit}\r\n                        setAddress={this.setAddress}\r\n                    />\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: ('AIzaSyBbQM-FxetsrzMqbJ2xzZbcbDUb9Au4nh4')\r\n})(App)\r\n","export const HEADER_TITLE = \"Find Water Quality Data Near Me\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'typeface-roboto';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}